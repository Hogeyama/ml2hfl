- optimize type chceking and type propagation 
- refine the judgment of recursive functions

- use BDD to represent types
- combination with intersection type inference (E-unification?)
- compile reductions (This brings a speedup only if the reduction phase is a bottleneck,
  which is currently not the case.)

Minor optimization
- Incremental extraction of type information
   when extracting types, look at only the places where terms have been newly expanded.
- Prepare a cache table for types and subtype relations? (related with BDD?)
- use an array instead of a hash table to represent a type environment
  (use array indexes as identifiers of non-terminals)
  Similarly for variable names and constants?
- optimize elim, by taking into account of a property of deterministic Buchi automaton
- normalize recursion schemes before model checking
   (--> It is not clear whether this brings speed-up)


