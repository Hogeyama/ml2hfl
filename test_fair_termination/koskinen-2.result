MoCHi: Model Checker for Higher-Order Programs
  Build: _af132b7 (after 2015-07-27 18:08:37 +0900)
  FPAT version: af132b7
  TRecS version: 1.33
  HorSat version: 0.99
  OCaml version: 4.02.1
  Command: ./mochi.opt -ignore-conf -color -fair-termination -bool-init-empty -fpat '-wp-max 2 -neg-pred' 
           test_fair_termination/koskinen-2.ml -expand-set-flag -rank-widen -horsat

parsed:
 let event_1008 s_1009 = () in
 let rec print_1010 x_1012 = let u_2011 = event_1008 "Print" in
                             print_1010 x_1012
 and rumble_1011 x_1013 y_1014 =
   if x_1013 < y_1014
   then
     if rand_int () > 0 then rumble_1011 (x_1013 + 1) y_1014 else rumble_1011 x_1013 (y_1014 - 1)
   else
     x_1013
 in
 let main_1015 x_2071 =
   let a_1016 = rand_int () in
   let b_1017 = rand_int () in
   print_1010 (rumble_1011 a_1016 (rumble_1011 a_1016 b_1017))
 in
 ()

FAIRNESS: {(Print, Never)}

###set_main:
 let rec print_1010 (s_2155:(bool)) (set_flag_2156:bool) (x_1012:int) =
   let s_2161 = fst ((true), ()) in
   let u_2011 = snd ((true), ()) in
   print_1010 s_2161 set_flag_2156 x_1012
 and rumble_1011 (x_1013:int) (s_2168:(bool)) (set_flag_2169:bool) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_2168 set_flag_2169 y_1014
     else
       rumble_1011 x_1013 s_2168 set_flag_2169 (y_1014 - 1)
   else
     (s_2168, x_1013)
 in
 let main_1015 (s_2180:(bool)) (set_flag_2181:bool) (x_2071:unit) =
   if set_flag_2181
   then
     let x_2182 = let u_2186 = if not (#0 s_2180) then assert false in
                  rand_int () = 0 in
     let sp_2192 = if x_2182 then ((false), ()) else (s_2180, ()) in
     let s_2183 = fst sp_2192 in
     let s__n_2195 = (s_2183, rand_int ()) in
     let s_2196 = fst s__n_2195 in
     let a_1016 = snd s__n_2195 in
     let s__n_2199 = (s_2196, rand_int ()) in
     let s_2200 = fst s__n_2199 in
     let b_1017 = snd s__n_2199 in
     let s__r_rumble_2203 = rumble_1011 a_1016 s_2200 true b_1017 in
     let s_2204 = fst s__r_rumble_2203 in
     let r_rumble_2145 = snd s__r_rumble_2203 in
     let s__r_rumble_2207 = rumble_1011 a_1016 s_2204 true r_rumble_2145 in
     let s_2208 = fst s__r_rumble_2207 in
     let r_rumble_2146 = snd s__r_rumble_2207 in
     print_1010 s_2208 true r_rumble_2146
   else
     let sp_2213 = if true then ((false), ()) else (s_2180, ()) in
     let s_2214 = fst sp_2213 in
     let s__n_2216 = (s_2214, rand_int ()) in
     let s_2217 = fst s__n_2216 in
     let a_2218 = snd s__n_2216 in
     let s__n_2219 = (s_2217, rand_int ()) in
     let s_2220 = fst s__n_2219 in
     let b_2221 = snd s__n_2219 in
     let s__r_rumble_2223 = rumble_1011 a_2218 s_2220 true b_2221 in
     let s_2224 = fst s__r_rumble_2223 in
     let r_rumble_2225 = snd s__r_rumble_2223 in
     let s__r_rumble_2222 = rumble_1011 a_2218 s_2224 true r_rumble_2225 in
     let s_2226 = fst s__r_rumble_2222 in
     let r_rumble_2227 = snd s__r_rumble_2222 in
     print_1010 s_2226 true r_rumble_2227
 in
 let s__r_main_2230 = main_1015 (false) false () in
 let s_2231 = fst s__r_main_2230 in
 let r_main_2147 = snd s__r_main_2230 in
 r_main_2147

###beta_reduce_trivial:
 let rec print_1010 (s_2155:(bool)) (set_flag_2156:bool) (x_1012:int) =
   let s_2161 = fst ((true), ()) in
   print_1010 s_2161 set_flag_2156 x_1012
 and rumble_1011 (x_1013:int) (s_2168:(bool)) (set_flag_2169:bool) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_2168 set_flag_2169 y_1014
     else
       rumble_1011 x_1013 s_2168 set_flag_2169 (y_1014 - 1)
   else
     (s_2168, x_1013)
 in
 let main_1015 (s_2180:(bool)) (set_flag_2181:bool) (x_2071:unit) =
   if set_flag_2181
   then
     let x_2182 = let u_2186 = if not (#0 s_2180) then assert false in
                  rand_int () = 0 in
     let sp_2192 = if x_2182 then ((false), ()) else (s_2180, ()) in
     let s_2183 = fst sp_2192 in
     let s__n_2195 = (s_2183, rand_int ()) in
     let s_2196 = fst s__n_2195 in
     let a_1016 = snd s__n_2195 in
     let s__n_2199 = (s_2196, rand_int ()) in
     let s_2200 = fst s__n_2199 in
     let b_1017 = snd s__n_2199 in
     let s__r_rumble_2203 = rumble_1011 a_1016 s_2200 true b_1017 in
     let s_2204 = fst s__r_rumble_2203 in
     let r_rumble_2145 = snd s__r_rumble_2203 in
     let s__r_rumble_2207 = rumble_1011 a_1016 s_2204 true r_rumble_2145 in
     let s_2208 = fst s__r_rumble_2207 in
     let r_rumble_2146 = snd s__r_rumble_2207 in
     print_1010 s_2208 true r_rumble_2146
   else
     let sp_2213 = if true then ((false), ()) else (s_2180, ()) in
     let s_2214 = fst sp_2213 in
     let s__n_2216 = (s_2214, rand_int ()) in
     let s_2217 = fst s__n_2216 in
     let a_2218 = snd s__n_2216 in
     let s__n_2219 = (s_2217, rand_int ()) in
     let s_2220 = fst s__n_2219 in
     let b_2221 = snd s__n_2219 in
     let s__r_rumble_2223 = rumble_1011 a_2218 s_2220 true b_2221 in
     let s_2224 = fst s__r_rumble_2223 in
     let r_rumble_2225 = snd s__r_rumble_2223 in
     let s__r_rumble_2222 = rumble_1011 a_2218 s_2224 true r_rumble_2225 in
     let s_2226 = fst s__r_rumble_2222 in
     let r_rumble_2227 = snd s__r_rumble_2222 in
     print_1010 s_2226 true r_rumble_2227
 in
 let s__r_main_2230 = main_1015 (false) false () in
 let r_main_2147 = snd s__r_main_2230 in
 r_main_2147

###inline:
 let rec print_1010 (s_2155:(bool)) (set_flag_2156:bool) (x_1012:int) =
   let s_2161 = fst ((true), ()) in
   print_1010 s_2161 set_flag_2156 x_1012
 and rumble_1011 (x_1013:int) (s_2168:(bool)) (set_flag_2169:bool) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_2168 set_flag_2169 y_1014
     else
       rumble_1011 x_1013 s_2168 set_flag_2169 (y_1014 - 1)
   else
     (s_2168, x_1013)
 in
 let main_1015 (s_2180:(bool)) (set_flag_2181:bool) (x_2071:unit) =
   if set_flag_2181
   then
     let x_2182 = let u_2186 = if not (#0 s_2180) then assert false in
                  rand_int () = 0 in
     let sp_2192 = if x_2182 then ((false), ()) else (s_2180, ()) in
     let s__n_2195 = (fst sp_2192, rand_int ()) in
     let s__n_2199 = (fst s__n_2195, rand_int ()) in
     let s__r_rumble_2203 = rumble_1011 (snd s__n_2195) (fst s__n_2199) true (snd s__n_2199) in
     let s__r_rumble_2207 = rumble_1011 (snd s__n_2195) (fst s__r_rumble_2203) true (snd s__r_rumble_2203) in
     print_1010 (fst s__r_rumble_2207) true (snd s__r_rumble_2207)
   else
     let sp_2213 = if true then ((false), ()) else (s_2180, ()) in
     let s__n_2216 = (fst sp_2213, rand_int ()) in
     let s__n_2219 = (fst s__n_2216, rand_int ()) in
     let s__r_rumble_2223 = rumble_1011 (snd s__n_2216) (fst s__n_2219) true (snd s__n_2219) in
     let s__r_rumble_2222 =
       rumble_1011 (snd s__n_2216) (fst s__r_rumble_2223) true (snd s__r_rumble_2223)
     in
     print_1010 (fst s__r_rumble_2222) true (snd s__r_rumble_2222)
 in
 let s__r_main_2230 = main_1015 (false) false () in
 snd s__r_main_2230

###CPS:
 (let rec print_1010 s_2155 set_flag_2156 x_1012 k_print_2654 =
    (fun s_3583 -> (print_1010 s_3583 set_flag_2156) x_1012 k_print_2654) (true)
  and rumble_1011 x_1013 s_2168 set_flag_2169 y_1014 k_rumble_2689 =
    if x_1013 < y_1014
    then
      rand_int_cps
        () 
        (fun x_2692 ->
           if x_2692 > 0
           then
             (rumble_1011 (x_1013 + 1) s_2168 set_flag_2169) y_1014 k_rumble_2689
           else
             (rumble_1011 x_1013 s_2168 set_flag_2169) (y_1014 - 1) k_rumble_2689)
    else
      k_rumble_2689 (s_2168, x_1013)
  in
  let main_1015 s_2180 set_flag_2181 x_2071 k_main_2753 =
    if set_flag_2181
    then
      let x_2182 k_main_x_2757 =
        let u_2186 k_main_x_u_2770 = if not (#0 s_2180) then <|fail|> () k_main_x_u_2770 else k_main_x_u_2770 () in
        u_2186 (fun u_2787 -> rand_int_cps () (fun x_2775 -> k_main_x_2757 (x_2775 = 0)))
      in
      x_2182
        (fun x_2893 ->
           let sp_2192 k_main_sp_2807 =
             if x_2893 then k_main_sp_2807 ((false), ()) else k_main_sp_2807 (s_2180, ())
           in
           sp_2192
             (fun sp_2892 ->
                let s__n_2195 k_main_s__n_2813 =
                  rand_int_cps () (fun x_2815 -> k_main_s__n_2813 (fst sp_2892, x_2815))
                in
                s__n_2195
                  (fun s__n_2891 ->
                     let s__n_2199 k_main_s__n_2831 =
                       rand_int_cps () (fun x_2833 -> k_main_s__n_2831 (fst s__n_2891, x_2833))
                     in
                     s__n_2199
                       (fun s__n_2890 ->
                          let s__r_rumble_2203 k_main_s__r_rumble_2855 =
                            (rumble_1011 (snd s__n_2891) (fst s__n_2890) true)
                              (snd s__n_2890) k_main_s__r_rumble_2855
                          in
                          s__r_rumble_2203
                            (fun s__r_rumble_2889 ->
                               let s__r_rumble_2207 k_main_s__r_rumble_2870 =
                                 (rumble_1011 (snd s__n_2891) (fst s__r_rumble_2889) true)
                                   (snd s__r_rumble_2889) k_main_s__r_rumble_2870
                               in
                               s__r_rumble_2207
                                 (fun s__r_rumble_2888 ->
                                    (print_1010 (fst s__r_rumble_2888) true)
                                      (snd s__r_rumble_2888) k_main_2753))))))
    else
      (fun sp_3584 ->
         let s__n_3585 k_main_s__n_3586 =
           rand_int_cps () (fun x_3587 -> k_main_s__n_3586 (fst sp_3584, x_3587))
         in
         s__n_3585
           (fun s__n_3588 ->
              let s__n_3589 k_main_s__n_3590 =
                rand_int_cps () (fun x_3591 -> k_main_s__n_3590 (fst s__n_3588, x_3591))
              in
              s__n_3589
                (fun s__n_3592 ->
                   let s__r_rumble_3593 k_main_s__r_rumble_3594 =
                     (rumble_1011 (snd s__n_3588) (fst s__n_3592) true)
                       (snd s__n_3592) k_main_s__r_rumble_3594
                   in
                   s__r_rumble_3593
                     (fun s__r_rumble_3595 ->
                        let s__r_rumble_3596 k_main_s__r_rumble_3597 =
                          (rumble_1011 (snd s__n_3588) (fst s__r_rumble_3595) true)
                            (snd s__r_rumble_3595) k_main_s__r_rumble_3597
                        in
                        s__r_rumble_3596
                          (fun s__r_rumble_3598 ->
                             (print_1010 (fst s__r_rumble_3598) true)
                               (snd s__r_rumble_3598) k_main_2753))))) 
        ((false), ())
  in
  let s__r_main_2230 k_s__r_main_3044 = ((main_1015 (false)) false) () k_s__r_main_3044 in
  s__r_main_2230 (fun s__r_main_3050 -> {end}) # [ACPS])

###remove_pair:
 (let rec print_1010 s0_2155 set_flag_2156 x_1012 k_print_2654 = print_1010 true set_flag_2156 x_1012 k_print_2654 
  and rumble_1011 x_1013 s0_2168 set_flag_2169 y_1014 k_rumble_2689 =
    if x_1013 < y_1014
    then
      rand_int_cps
        () 
        (fun x_2692 ->
           if x_2692 > 0
           then
             rumble_1011 (x_1013 + 1) s0_2168 set_flag_2169 y_1014 k_rumble_2689
           else
             rumble_1011 x_1013 s0_2168 set_flag_2169 (y_1014 - 1) k_rumble_2689)
    else
      k_rumble_2689 s0_2168 x_1013
  in
  let main_1015 s0_2180 set_flag_2181 x_2071 k_main_2753 =
    if set_flag_2181
    then
      let x_2182 k_main_x_2757 =
        let u_2186 k_main_x_u_2770 = if not s0_2180 then <|fail|> () k_main_x_u_2770 else k_main_x_u_2770 () in
        u_2186 (fun u_2787 -> rand_int_cps () (fun x_2775 -> k_main_x_2757 (x_2775 = 0)))
      in
      x_2182
        (fun x_2893 ->
           let sp_2192 k_main_sp_2807 =
             if x_2893 then k_main_sp_2807 false () else k_main_sp_2807 s0_2180 ()
           in
           sp_2192
             (fun sp00_2892 sp1_2892 ->
                let s__n_2195 k_main_s__n_2813 =
                  rand_int_cps () (fun x_2815 -> k_main_s__n_2813 sp00_2892 x_2815)
                in
                s__n_2195
                  (fun s__n00_2891 s__n1_2891 ->
                     let s__n_2199 k_main_s__n_2831 =
                       rand_int_cps () (fun x_2833 -> k_main_s__n_2831 s__n00_2891 x_2833)
                     in
                     s__n_2199
                       (fun s__n00_2890 s__n1_2890 ->
                          rumble_1011
                            s__n1_2891 s__n00_2890 true s__n1_2890 
                            (fun s__r_rumble00_2889 s__r_rumble1_2889 ->
                               rumble_1011
                                 s__n1_2891 s__r_rumble00_2889 true s__r_rumble1_2889 
                                 (fun s__r_rumble00_2888 s__r_rumble1_2888 ->
                                    print_1010 s__r_rumble00_2888 true s__r_rumble1_2888 k_main_2753))))))
    else
      let s__n_3585 k_main_s__n_3586 = rand_int_cps () (fun x_3587 -> k_main_s__n_3586 false x_3587) in
      s__n_3585
        (fun s__n00_3588 s__n1_3588 ->
           let s__n_3589 k_main_s__n_3590 =
             rand_int_cps () (fun x_3591 -> k_main_s__n_3590 s__n00_3588 x_3591)
           in
           s__n_3589
             (fun s__n00_3592 s__n1_3592 ->
                rumble_1011
                  s__n1_3588 s__n00_3592 true s__n1_3592 
                  (fun s__r_rumble00_3595 s__r_rumble1_3595 ->
                     rumble_1011
                       s__n1_3588 s__r_rumble00_3595 true s__r_rumble1_3595 
                       (fun s__r_rumble00_3598 s__r_rumble1_3598 ->
                          print_1010 s__r_rumble00_3598 true s__r_rumble1_3598 k_main_2753))))
  in
  main_1015 false false () (fun s__r_main00_3050 s__r_main1_3050 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 0)::
Main: main_3874
  main_3874 -> (main_1015 false false () f_3892).
  f_3892 s__r_main00_3050 s__r_main1_3050 -> end.
  f_main_3878 s0_2180 set_flag_2181 x_2071 k_main_2753 x_2893 ->
      (sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 (f_main_3879 s0_2180 set_flag_2181 x_2071 x_2893 k_main_2753)).
  f_main_3879 s0_2180 set_flag_2181 x_2071 x_2893 k_main_2753 sp00_2892 sp1_2892 ->
      (s__n_2195 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893
       (f_main_3881 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3881 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__n00_2891 s__n1_2891 ->
      (s__n_2199 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893
       (f_main_3883 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3883 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__n00_2890 
  s__n1_2890 ->
      (rumble_1011 s__n1_2891 s__n00_2890 true s__n1_2890
       (f_main_3884 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071
        x_2893 k_main_2753)).
  f_main_3884 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 
  k_main_2753 s__r_rumble00_2889 s__r_rumble1_2889 ->
      (rumble_1011 s__n1_2891 s__r_rumble00_2889 true s__r_rumble1_2889
       (f_main_3885 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 s__r_rumble00_2889 s__r_rumble1_2889
        set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3885 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 s__r_rumble00_2889 s__r_rumble1_2889 set_flag_2181 
  sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__r_rumble00_2888 s__r_rumble1_2888 ->
      (print_1010 s__r_rumble00_2888 true s__r_rumble1_2888 k_main_2753).
  f_main_3887 s0_2180 set_flag_2181 x_2071 k_main_2753 s__n00_3588 s__n1_3588 ->
      (s__n_3589 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071
       (f_main_3889 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_2753)).
  f_main_3889 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_2753 s__n00_3592 s__n1_3592 ->
      (rumble_1011 s__n1_3588 s__n00_3592 true s__n1_3592
       (f_main_3890 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 set_flag_2181 x_2071 k_main_2753)).
  f_main_3890 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 set_flag_2181 x_2071 k_main_2753 
  s__r_rumble00_3595 s__r_rumble1_3595 ->
      (rumble_1011 s__n1_3588 s__r_rumble00_3595 true s__r_rumble1_3595
       (f_main_3891 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 s__r_rumble00_3595 s__r_rumble1_3595
        set_flag_2181 x_2071 k_main_2753)).
  f_main_3891 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 s__r_rumble00_3595 s__r_rumble1_3595 set_flag_2181 
  x_2071 k_main_2753 s__r_rumble00_3598 s__r_rumble1_3598 ->
      (print_1010 s__r_rumble00_3598 true s__r_rumble1_3598 k_main_2753).
  f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689 x_2692 when 
      (x_2692 > 0) -> (rumble_1011 (x_1013 + 1) s0_2168 set_flag_2169 y_1014 k_rumble_2689).
  f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689 x_2692 when 
      (not (x_2692 > 0)) -> (rumble_1011 x_1013 s0_2168 set_flag_2169 (y_1014 - 1) k_rumble_2689).
  f_s__n_3880 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813 x_2815 ->
      (k_main_s__n_2813 sp00_2892 x_2815).
  f_s__n_3882 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831 x_2833 ->
      (k_main_s__n_2831 s__n00_2891 x_2833).
  f_s__n_3886 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586 x_3587 -> (k_main_s__n_3586 false x_3587).
  f_s__n_3888 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590 x_3591 ->
      (k_main_s__n_3590 s__n00_3588 x_3591).
  f_x_3876 s0_2180 set_flag_2181 x_2071 k_main_x_2757 u_2787 ->
      (rand_int (f_x_3877 s0_2180 set_flag_2181 u_2787 x_2071 k_main_x_2757)).
  f_x_3877 s0_2180 set_flag_2181 u_2787 x_2071 k_main_x_2757 x_2775 -> (k_main_x_2757 (x_2775 = 0)).
  fail_3893 b k -> {fail} => (k ()).
  main_1015 s0_2180 set_flag_2181 x_2071 k_main_2753 when set_flag_2181 ->
      (x_2182 s0_2180 set_flag_2181 x_2071 (f_main_3878 s0_2180 set_flag_2181 x_2071 k_main_2753)).
  main_1015 s0_2180 set_flag_2181 x_2071 k_main_2753 when (not set_flag_2181) ->
      (s__n_3585 s0_2180 set_flag_2181 x_2071 (f_main_3887 s0_2180 set_flag_2181 x_2071 k_main_2753)).
  print_1010 s0_2155 set_flag_2156 x_1012 k_print_2654 -> (print_1010 true set_flag_2156 x_1012 k_print_2654).
  rumble_1011 x_1013 s0_2168 set_flag_2169 y_1014 k_rumble_2689 when 
      (x_1013 < y_1014) -> (rand_int (f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689)).
  rumble_1011 x_1013 s0_2168 set_flag_2169 y_1014 k_rumble_2689 when 
      (not (x_1013 < y_1014)) -> (k_rumble_2689 s0_2168 x_1013).
  s__n_2195 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813 ->
      (rand_int (f_s__n_3880 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813)).
  s__n_2199 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831 ->
      (rand_int
       (f_s__n_3882 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831)).
  s__n_3585 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586 ->
      (rand_int (f_s__n_3886 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586)).
  s__n_3589 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590 ->
      (rand_int (f_s__n_3888 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590)).
  sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 k_main_sp_2807 when x_2893 -> (k_main_sp_2807 false ()).
  sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 k_main_sp_2807 when (not x_2893) -> (k_main_sp_2807 s0_2180 ()).
  u_2186 s0_2180 set_flag_2181 x_2071 k_main_x_u_2770 when (not s0_2180) -> (fail_3893 true k_main_x_u_2770).
  u_2186 s0_2180 set_flag_2181 x_2071 k_main_x_u_2770 when (not (not s0_2180)) -> (k_main_x_u_2770 ()).
  x_2182 s0_2180 set_flag_2181 x_2071 k_main_x_2757 ->
      (u_2186 s0_2180 set_flag_2181 x_2071 (f_x_3876 s0_2180 set_flag_2181 x_2071 k_main_x_2757)).
Types:
  main_3874 : X
  f_rumble_3875 : (bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_3893 : (bool -> (unit -> X) -> X)
  main_1015 : (bool -> bool -> unit -> (bool -> unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> (bool -> int -> X) -> X)
  sp_2192 : (bool -> bool -> unit -> bool -> (bool -> unit -> X) -> X)
  u_2186 : (bool -> bool -> unit -> (unit -> X) -> X)

(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_3874 ... --> 
  main_1015 [1/2] ... --> 
  x_2182 ... --> 
  u_2186 [1/2] ... --> 
  fail_3893 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0

(0-3) Checking counterexample ... DONE!

(0-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_3874
  main_3874 -> (main_1015 false false () f_3892).
  f_3892 s__r_main00_3050 s__r_main1_3050 -> end.
  f_main_3878 s0_2180 set_flag_2181 x_2071 k_main_2753 x_2893 ->
      (sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 (f_main_3879 s0_2180 set_flag_2181 x_2071 x_2893 k_main_2753)).
  f_main_3879 s0_2180 set_flag_2181 x_2071 x_2893 k_main_2753 sp00_2892 sp1_2892 ->
      (s__n_2195 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893
       (f_main_3881 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3881 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__n00_2891 s__n1_2891 ->
      (s__n_2199 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893
       (f_main_3883 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3883 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__n00_2890 
  s__n1_2890 ->
      (rumble_1011 s__n1_2891 s__n00_2890 true s__n1_2890
       (f_main_3884 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071
        x_2893 k_main_2753)).
  f_main_3884 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 
  k_main_2753 s__r_rumble00_2889 s__r_rumble1_2889 ->
      (rumble_1011 s__n1_2891 s__r_rumble00_2889 true s__r_rumble1_2889
       (f_main_3885 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 s__r_rumble00_2889 s__r_rumble1_2889
        set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753)).
  f_main_3885 s0_2180 s__n00_2890 s__n00_2891 s__n1_2890 s__n1_2891 s__r_rumble00_2889 s__r_rumble1_2889 set_flag_2181 
  sp00_2892 sp1_2892 x_2071 x_2893 k_main_2753 s__r_rumble00_2888 s__r_rumble1_2888 ->
      (print_1010 s__r_rumble00_2888 true s__r_rumble1_2888 k_main_2753).
  f_main_3887 s0_2180 set_flag_2181 x_2071 k_main_2753 s__n00_3588 s__n1_3588 ->
      (s__n_3589 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071
       (f_main_3889 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_2753)).
  f_main_3889 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_2753 s__n00_3592 s__n1_3592 ->
      (rumble_1011 s__n1_3588 s__n00_3592 true s__n1_3592
       (f_main_3890 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 set_flag_2181 x_2071 k_main_2753)).
  f_main_3890 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 set_flag_2181 x_2071 k_main_2753 
  s__r_rumble00_3595 s__r_rumble1_3595 ->
      (rumble_1011 s__n1_3588 s__r_rumble00_3595 true s__r_rumble1_3595
       (f_main_3891 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 s__r_rumble00_3595 s__r_rumble1_3595
        set_flag_2181 x_2071 k_main_2753)).
  f_main_3891 s0_2180 s__n00_3588 s__n00_3592 s__n1_3588 s__n1_3592 s__r_rumble00_3595 s__r_rumble1_3595 set_flag_2181 
  x_2071 k_main_2753 s__r_rumble00_3598 s__r_rumble1_3598 ->
      (print_1010 s__r_rumble00_3598 true s__r_rumble1_3598 k_main_2753).
  f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689 x_2692 when 
      (x_2692 > 0) -> (rumble_1011 (x_1013 + 1) s0_2168 set_flag_2169 y_1014 k_rumble_2689).
  f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689 x_2692 when 
      (not (x_2692 > 0)) -> (rumble_1011 x_1013 s0_2168 set_flag_2169 (y_1014 - 1) k_rumble_2689).
  f_s__n_3880 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813 x_2815 ->
      (k_main_s__n_2813 sp00_2892 x_2815).
  f_s__n_3882 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831 x_2833 ->
      (k_main_s__n_2831 s__n00_2891 x_2833).
  f_s__n_3886 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586 x_3587 -> (k_main_s__n_3586 false x_3587).
  f_s__n_3888 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590 x_3591 ->
      (k_main_s__n_3590 s__n00_3588 x_3591).
  f_x_3876 s0_2180 set_flag_2181 x_2071 k_main_x_2757 u_2787 ->
      (rand_int (f_x_3877 s0_2180 set_flag_2181 u_2787 x_2071 k_main_x_2757)).
  f_x_3877 s0_2180 set_flag_2181 u_2787 x_2071 k_main_x_2757 x_2775 -> (k_main_x_2757 (x_2775 = 0)).
  fail_3893 b k -> {fail} => (k ()).
  main_1015 s0_2180 set_flag_2181 x_2071 k_main_2753 when set_flag_2181 ->
      (x_2182 s0_2180 set_flag_2181 x_2071 (f_main_3878 s0_2180 set_flag_2181 x_2071 k_main_2753)).
  main_1015 s0_2180 set_flag_2181 x_2071 k_main_2753 when (not set_flag_2181) ->
      (s__n_3585 s0_2180 set_flag_2181 x_2071 (f_main_3887 s0_2180 set_flag_2181 x_2071 k_main_2753)).
  print_1010 s0_2155 set_flag_2156 x_1012 k_print_2654 -> (print_1010 true set_flag_2156 x_1012 k_print_2654).
  rumble_1011 x_1013 s0_2168 set_flag_2169 y_1014 k_rumble_2689 when 
      (x_1013 < y_1014) -> (rand_int (f_rumble_3875 s0_2168 set_flag_2169 x_1013 y_1014 k_rumble_2689)).
  rumble_1011 x_1013 s0_2168 set_flag_2169 y_1014 k_rumble_2689 when 
      (not (x_1013 < y_1014)) -> (k_rumble_2689 s0_2168 x_1013).
  s__n_2195 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813 ->
      (rand_int (f_s__n_3880 s0_2180 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2813)).
  s__n_2199 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831 ->
      (rand_int
       (f_s__n_3882 s0_2180 s__n00_2891 s__n1_2891 set_flag_2181 sp00_2892 sp1_2892 x_2071 x_2893 k_main_s__n_2831)).
  s__n_3585 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586 ->
      (rand_int (f_s__n_3886 s0_2180 set_flag_2181 x_2071 k_main_s__n_3586)).
  s__n_3589 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590 ->
      (rand_int (f_s__n_3888 s0_2180 s__n00_3588 s__n1_3588 set_flag_2181 x_2071 k_main_s__n_3590)).
  sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 k_main_sp_2807 when x_2893 -> (k_main_sp_2807 false ()).
  sp_2192 s0_2180 set_flag_2181 x_2071 x_2893 k_main_sp_2807 when (not x_2893) -> (k_main_sp_2807 s0_2180 ()).
  u_2186 s0_2180 set_flag_2181 x_2071 k_main_x_u_2770 when (not s0_2180) -> (fail_3893 true k_main_x_u_2770).
  u_2186 s0_2180 set_flag_2181 x_2071 k_main_x_u_2770 when (not (not s0_2180)) -> (k_main_x_u_2770 ()).
  x_2182 s0_2180 set_flag_2181 x_2071 k_main_x_2757 ->
      (u_2186 s0_2180 set_flag_2181 x_2071 (f_x_3876 s0_2180 set_flag_2181 x_2071 k_main_x_2757)).
Types:
  main_3874 : X
  f_rumble_3875 : (bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_3893 : (bool -> (unit -> X) -> X)
  main_1015 : (bool -> x_3:bool -> unit[(not x_3)] -> (bool -> unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> (bool -> int -> X) -> X)
  sp_2192 : (bool -> bool -> unit -> bool -> (bool -> unit -> X) -> X)
  u_2186 : (bool -> bool -> unit -> (unit -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Safe!

###set_main:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   let u_2011 = snd ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 = let u_5500 = if not (#0 s_5490) then assert false in
                  rand_int () = 0 in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let s_5553 = fst s__r_main_5552 in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###beta_reduce_trivial:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 = let u_5500 = if not (#0 s_5490) then assert false in
                  rand_int () = 0 in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###inline:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 = let u_5500 = if not (#0 s_5490) then assert false in
                  rand_int () = 0 in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5510) true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 (fst sp_5510) true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (fst sp_5510, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5519) true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 (fst sp_5519) true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (fst sp_5519, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s__n_5538 = (fst s__n_5534, rand_int ()) in
   let s__r_rumble_5542 =
     rumble_1011 (snd s__n_5534) (fst s__n_5538) set_flag_5529 0 0 (snd s__n_5538)
   in
   let s__r_rumble_5546 =
     rumble_1011 (snd s__n_5534) (fst s__r_rumble_5542) set_flag_5529 0 0 (snd s__r_rumble_5542)
   in
   print_1010 (fst s__r_rumble_5546) set_flag_5529 0 0 (snd s__r_rumble_5546)
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 snd s__r_main_5552

###CPS:
 (let rec print_1010 s_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_6106 =
    (fun s_7173 -> (print_1010 s_7173 set_flag_5476 0 0) x_1012 k_print_6106) (true)
  and rumble_1011 x_1013 s_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_6149 =
        let u_5500 k_rumble_x_u_6162 =
          if not (#0 s_5490) then <|fail|> () k_rumble_x_u_6162 else k_rumble_x_u_6162 ()
        in
        u_5500 (fun u_6179 -> rand_int_cps () (fun x_6167 -> k_rumble_x_6149 (x_6167 = 0)))
      in
      x_5494
        (fun x_6279 ->
           let sp_5510 k_rumble_sp_6211 =
             if x_6279
             then
               k_rumble_sp_6211 ((false), (x_1013, y_1014))
             else
               k_rumble_sp_6211 (s_5490, (p_x_5492, p_y_5493))
           in
           sp_5510
             (fun sp_6278 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_6220 ->
                       if x_6220 > 0
                       then
                         (rumble_1011 (x_1013 + 1) (fst sp_6278) true (fst (snd sp_6278)) (snd (snd sp_6278)))
                           y_1014 k_rumble_6145
                       else
                         (rumble_1011 x_1013 (fst sp_6278) true (fst (snd sp_6278)) (snd (snd sp_6278)))
                           (y_1014 - 1) k_rumble_6145)
                else
                  k_rumble_6145 (fst sp_6278, x_1013)))
    else
      let sp_5519 k_rumble_sp_6311 = k_rumble_sp_6311 ((false), (x_1013, y_1014)) in
      sp_5519
        (fun sp_6378 ->
           if x_1013 < y_1014
           then
             rand_int_cps
               () 
               (fun x_6320 ->
                  if x_6320 > 0
                  then
                    (rumble_1011 (x_1013 + 1) (fst sp_6378) true (fst (snd sp_6378)) (snd (snd sp_6378)))
                      y_1014 k_rumble_6145
                  else
                    (rumble_1011 x_1013 (fst sp_6378) true (fst (snd sp_6378)) (snd (snd sp_6378)))
                      (y_1014 - 1) k_rumble_6145)
           else
             k_rumble_6145 (fst sp_6378, x_1013))
  in
  let main_1015 s_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_6394 =
    let s__n_5534 k_main_s__n_6398 = rand_int_cps () (fun x_6400 -> k_main_s__n_6398 (s_5528, x_6400)) in
    s__n_5534
      (fun s__n_6482 ->
         let s__n_5538 k_main_s__n_6416 =
           rand_int_cps () (fun x_6418 -> k_main_s__n_6416 (fst s__n_6482, x_6418))
         in
         s__n_5538
           (fun s__n_6481 ->
              let s__r_rumble_5542 k_main_s__r_rumble_6442 =
                (rumble_1011 (snd s__n_6482) (fst s__n_6481) set_flag_5529 0 0)
                  (snd s__n_6481) k_main_s__r_rumble_6442
              in
              s__r_rumble_5542
                (fun s__r_rumble_6480 ->
                   let s__r_rumble_5546 k_main_s__r_rumble_6459 =
                     (rumble_1011 (snd s__n_6482) (fst s__r_rumble_6480) set_flag_5529 0 0)
                       (snd s__r_rumble_6480) k_main_s__r_rumble_6459
                   in
                   s__r_rumble_5546
                     (fun s__r_rumble_6479 ->
                        (print_1010 (fst s__r_rumble_6479) set_flag_5529 0 0)
                          (snd s__r_rumble_6479) k_main_6394))))
  in
  let s__r_main_5552 k_s__r_main_6560 = ((((main_1015 (false)) false) 0) 0) () k_s__r_main_6560 in
  s__r_main_5552 (fun s__r_main_6566 -> {end}) # [ACPS])

###remove_pair:
 (let rec print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_6106 =
    print_1010 true set_flag_5476 0 0 x_1012 k_print_6106
  and rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_6149 =
        let u_5500 k_rumble_x_u_6162 = if not s0_5490 then <|fail|> () k_rumble_x_u_6162 else k_rumble_x_u_6162 () in
        u_5500 (fun u_6179 -> rand_int_cps () (fun x_6167 -> k_rumble_x_6149 (x_6167 = 0)))
      in
      x_5494
        (fun x_6279 ->
           let sp_5510 k_rumble_sp_6211 =
             if x_6279
             then
               k_rumble_sp_6211 false x_1013 y_1014
             else
               k_rumble_sp_6211 s0_5490 p_x_5492 p_y_5493
           in
           sp_5510
             (fun sp00_6278 sp10_6278 sp11_6278 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_6220 ->
                       if x_6220 > 0
                       then
                         rumble_1011 (x_1013 + 1) sp00_6278 true sp10_6278 sp11_6278 y_1014 k_rumble_6145
                       else
                         rumble_1011 x_1013 sp00_6278 true sp10_6278 sp11_6278 (y_1014 - 1) k_rumble_6145)
                else
                  k_rumble_6145 sp00_6278 x_1013))
    else
      if x_1013 < y_1014
      then
        rand_int_cps
          () 
          (fun x_6320 ->
             if x_6320 > 0
             then
               rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_6145
             else
               rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_6145)
      else
        k_rumble_6145 false x_1013
  in
  let main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_6394 =
    let s__n_5534 k_main_s__n_6398 = rand_int_cps () (fun x_6400 -> k_main_s__n_6398 s0_5528 x_6400) in
    s__n_5534
      (fun s__n00_6482 s__n1_6482 ->
         let s__n_5538 k_main_s__n_6416 = rand_int_cps () (fun x_6418 -> k_main_s__n_6416 s__n00_6482 x_6418) in
         s__n_5538
           (fun s__n00_6481 s__n1_6481 ->
              rumble_1011
                s__n1_6482 s__n00_6481 set_flag_5529 0 0 s__n1_6481 
                (fun s__r_rumble00_6480 s__r_rumble1_6480 ->
                   rumble_1011
                     s__n1_6482 s__r_rumble00_6480 set_flag_5529 0 0 
                     s__r_rumble1_6480 
                     (fun s__r_rumble00_6479 s__r_rumble1_6479 ->
                        print_1010 s__r_rumble00_6479 set_flag_5529 0 0 s__r_rumble1_6479 k_main_6394))))
  in
  main_1015 false false 0 0 () (fun s__r_main00_6566 s__r_main1_6566 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 2)::
Main: main_7472
  main_7472 -> (main_1015 false false 0 0 () f_7485).
  br_rumble_7486 b_7487 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when b_7487 ->
      (rand_int (f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145)).
  br_rumble_7486 b_7487 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when 
      (not b_7487) -> (k_rumble_6145 false x_1013).
  f_7485 s__r_main00_6566 s__r_main1_6566 -> end.
  f_main_7480 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_6394 s__n00_6482 s__n1_6482 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071
       (f_main_7482 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_6394)).
  f_main_7482 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_6394 s__n00_6481 s__n1_6481 ->
      (rumble_1011 s__n1_6482 s__n00_6481 set_flag_5529 0 0 s__n1_6481
       (f_main_7483 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 set_flag_5529 x_2071
        k_main_6394)).
  f_main_7483 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 set_flag_5529 x_2071 k_main_6394 
  s__r_rumble00_6480 s__r_rumble1_6480 ->
      (rumble_1011 s__n1_6482 s__r_rumble00_6480 set_flag_5529 0 0 s__r_rumble1_6480
       (f_main_7484 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 s__r_rumble00_6480
        s__r_rumble1_6480 set_flag_5529 x_2071 k_main_6394)).
  f_main_7484 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 s__r_rumble00_6480 
  s__r_rumble1_6480 set_flag_5529 x_2071 k_main_6394 s__r_rumble00_6479 s__r_rumble1_6479 ->
      (print_1010 s__r_rumble00_6479 set_flag_5529 0 0 s__r_rumble1_6479 k_main_6394).
  f_rumble_7475 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6279 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014
       (f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145)).
  f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145 sp00_6278 sp10_6278 
  sp11_6278 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014
        k_rumble_6145)).
  f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145 sp00_6278 sp10_6278 
  sp11_6278 when (not (x_1013 < y_1014)) -> (k_rumble_6145 sp00_6278 x_1013).
  f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014 
  k_rumble_6145 x_6220 when (x_6220 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_6278 true sp10_6278 sp11_6278 y_1014 k_rumble_6145).
  f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014 
  k_rumble_6145 x_6220 when (not (x_6220 > 0)) ->
      (rumble_1011 x_1013 sp00_6278 true sp10_6278 sp11_6278 (y_1014 - 1) k_rumble_6145).
  f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6320 when 
      (x_6320 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_6145).
  f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6320 when 
      (not (x_6320 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_6145).
  f_s__n_7479 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398 x_6400 ->
      (k_main_s__n_6398 s0_5528 x_6400).
  f_s__n_7481 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416 x_6418 ->
      (k_main_s__n_6416 s__n00_6482 x_6418).
  f_x_7473 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149 u_6179 ->
      (rand_int (f_x_7474 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_6179 x_1013 y_1014 k_rumble_x_6149)).
  f_x_7474 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_6179 x_1013 y_1014 k_rumble_x_6149 x_6167 ->
      (k_rumble_x_6149 (x_6167 = 0)).
  fail_7488 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_6394 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_7480 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_6394)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_6106 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_6106).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_7475 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when 
      (not set_flag_5491) ->
      (br_rumble_7486 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398 ->
      (rand_int (f_s__n_7479 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416 ->
      (rand_int (f_s__n_7481 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_sp_6211 when x_6279 ->
      (k_rumble_sp_6211 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_sp_6211 when 
      (not x_6279) -> (k_rumble_sp_6211 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_6162 when 
      (not s0_5490) -> (fail_7488 true k_rumble_x_u_6162).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_6162 when 
      (not (not s0_5490)) -> (k_rumble_x_u_6162 ()).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_7473 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149)).
Types:
  main_7472 : X
  br_rumble_7486 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_7476 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_7477 : (int ->
                   int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_7478 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_7488 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_7472 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_7479 ... --> 
  f_main_7480 ... --> 
  s__n_5538 ... --> 
  f_s__n_7481 ... --> 
  f_main_7482 ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  fail_7488 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0

(2-3) Checking counterexample ... DONE!

(2-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_7472
  main_7472 -> (main_1015 false false 0 0 () f_7485).
  br_rumble_7486 b_7487 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when b_7487 ->
      (rand_int (f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145)).
  br_rumble_7486 b_7487 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when 
      (not b_7487) -> (k_rumble_6145 false x_1013).
  f_7485 s__r_main00_6566 s__r_main1_6566 -> end.
  f_main_7480 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_6394 s__n00_6482 s__n1_6482 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071
       (f_main_7482 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_6394)).
  f_main_7482 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_6394 s__n00_6481 s__n1_6481 ->
      (rumble_1011 s__n1_6482 s__n00_6481 set_flag_5529 0 0 s__n1_6481
       (f_main_7483 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 set_flag_5529 x_2071
        k_main_6394)).
  f_main_7483 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 set_flag_5529 x_2071 k_main_6394 
  s__r_rumble00_6480 s__r_rumble1_6480 ->
      (rumble_1011 s__n1_6482 s__r_rumble00_6480 set_flag_5529 0 0 s__r_rumble1_6480
       (f_main_7484 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 s__r_rumble00_6480
        s__r_rumble1_6480 set_flag_5529 x_2071 k_main_6394)).
  f_main_7484 p_x_5530 p_y_5531 s0_5528 s__n00_6481 s__n00_6482 s__n1_6481 s__n1_6482 s__r_rumble00_6480 
  s__r_rumble1_6480 set_flag_5529 x_2071 k_main_6394 s__r_rumble00_6479 s__r_rumble1_6479 ->
      (print_1010 s__r_rumble00_6479 set_flag_5529 0 0 s__r_rumble1_6479 k_main_6394).
  f_rumble_7475 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6279 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014
       (f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145)).
  f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145 sp00_6278 sp10_6278 
  sp11_6278 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014
        k_rumble_6145)).
  f_rumble_7476 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_6145 sp00_6278 sp10_6278 
  sp11_6278 when (not (x_1013 < y_1014)) -> (k_rumble_6145 sp00_6278 x_1013).
  f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014 
  k_rumble_6145 x_6220 when (x_6220 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_6278 true sp10_6278 sp11_6278 y_1014 k_rumble_6145).
  f_rumble_7477 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_6278 sp10_6278 sp11_6278 x_1013 x_6279 y_1014 
  k_rumble_6145 x_6220 when (not (x_6220 > 0)) ->
      (rumble_1011 x_1013 sp00_6278 true sp10_6278 sp11_6278 (y_1014 - 1) k_rumble_6145).
  f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6320 when 
      (x_6320 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_6145).
  f_rumble_7478 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145 x_6320 when 
      (not (x_6320 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_6145).
  f_s__n_7479 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398 x_6400 ->
      (k_main_s__n_6398 s0_5528 x_6400).
  f_s__n_7481 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416 x_6418 ->
      (k_main_s__n_6416 s__n00_6482 x_6418).
  f_x_7473 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149 u_6179 ->
      (rand_int (f_x_7474 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_6179 x_1013 y_1014 k_rumble_x_6149)).
  f_x_7474 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_6179 x_1013 y_1014 k_rumble_x_6149 x_6167 ->
      (k_rumble_x_6149 (x_6167 = 0)).
  fail_7488 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_6394 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_7480 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_6394)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_6106 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_6106).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_7475 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_6145)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145 when 
      (not set_flag_5491) ->
      (br_rumble_7486 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_6145).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398 ->
      (rand_int (f_s__n_7479 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_6398)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416 ->
      (rand_int (f_s__n_7481 p_x_5530 p_y_5531 s0_5528 s__n00_6482 s__n1_6482 set_flag_5529 x_2071 k_main_s__n_6416)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_sp_6211 when x_6279 ->
      (k_rumble_sp_6211 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_6279 y_1014 k_rumble_sp_6211 when 
      (not x_6279) -> (k_rumble_sp_6211 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_6162 when 
      (not s0_5490) -> (fail_7488 true k_rumble_x_u_6162).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_6162 when 
      (not (not s0_5490)) -> (k_rumble_x_u_6162 ()).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_7473 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_6149)).
Types:
  main_7472 : X
  br_rumble_7486 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_7476 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_7477 : (int ->
                   int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_7478 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_7488 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> x_4:bool -> int -> int -> int[(not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_7472 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_7479 ... --> 
  f_main_7480 ... --> 
  s__n_5538 ... --> 
  f_s__n_7481 ... --> 
  f_main_7482 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_7486 [1/2] ... --> 
  f_rumble_7478 [2/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  fail_7488 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0; 0; 0; 0

(3-3) Checking counterexample ... DONE!

(3-4) Discovering ranking function ... 
DONE!

###set_main:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   let u_2011 = snd ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0) then () else _|_ () in
           assert ((-x_1013) + ((1 * y_1014) + 0) >= 0)
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let s_5553 = fst s__r_main_5552 in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###beta_reduce_trivial:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0) then () else _|_ () in
           assert ((-x_1013) + ((1 * y_1014) + 0) >= 0)
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###inline:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0) then () else _|_ () in
           assert ((-x_1013) + ((1 * y_1014) + 0) >= 0)
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5510) true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 (fst sp_5510) true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (fst sp_5510, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5519) true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 (fst sp_5519) true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (fst sp_5519, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s__n_5538 = (fst s__n_5534, rand_int ()) in
   let s__r_rumble_5542 =
     rumble_1011 (snd s__n_5534) (fst s__n_5538) set_flag_5529 0 0 (snd s__n_5538)
   in
   let s__r_rumble_5546 =
     rumble_1011
       (snd s__n_5534) (fst s__r_rumble_5542) set_flag_5529 0 0 (snd s__r_rumble_5542)
   in
   print_1010 (fst s__r_rumble_5546) set_flag_5529 0 0 (snd s__r_rumble_5546)
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 snd s__r_main_5552

###CPS:
 (let rec print_1010 s_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 =
    (fun s_10379 -> (print_1010 s_10379 set_flag_5476 0 0) x_1012 k_print_9272) (true)
  and rumble_1011 x_1013 s_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_9315 =
        let u_5500 k_rumble_x_u_9347 =
          if not (#0 s_5490)
          then
            let u_8717 k_rumble_x_u_u_9331 =
              if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)
              then
                k_rumble_x_u_u_9331 ()
              else
                _|_
            in
            u_8717
              (fun u_9345 ->
                 if (-x_1013) + ((1 * y_1014) + 0) >= 0
                 then
                   k_rumble_x_u_9347 ()
                 else
                   <|fail|> () k_rumble_x_u_9347)
          else
            k_rumble_x_u_9347 ()
        in
        u_5500 (fun u_9364 -> rand_int_cps () (fun x_9352 -> k_rumble_x_9315 (x_9352 = 0)))
      in
      x_5494
        (fun x_9464 ->
           let sp_5510 k_rumble_sp_9396 =
             if x_9464
             then
               k_rumble_sp_9396 ((false), (x_1013, y_1014))
             else
               k_rumble_sp_9396 (s_5490, (p_x_5492, p_y_5493))
           in
           sp_5510
             (fun sp_9463 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_9405 ->
                       if x_9405 > 0
                       then
                         (rumble_1011 (x_1013 + 1) (fst sp_9463) true (fst (snd sp_9463)) (snd (snd sp_9463)))
                           y_1014 k_rumble_9311
                       else
                         (rumble_1011 x_1013 (fst sp_9463) true (fst (snd sp_9463)) (snd (snd sp_9463)))
                           (y_1014 - 1) k_rumble_9311)
                else
                  k_rumble_9311 (fst sp_9463, x_1013)))
    else
      let sp_5519 k_rumble_sp_9496 = k_rumble_sp_9496 ((false), (x_1013, y_1014)) in
      sp_5519
        (fun sp_9563 ->
           if x_1013 < y_1014
           then
             rand_int_cps
               () 
               (fun x_9505 ->
                  if x_9505 > 0
                  then
                    (rumble_1011 (x_1013 + 1) (fst sp_9563) true (fst (snd sp_9563)) (snd (snd sp_9563)))
                      y_1014 k_rumble_9311
                  else
                    (rumble_1011 x_1013 (fst sp_9563) true (fst (snd sp_9563)) (snd (snd sp_9563)))
                      (y_1014 - 1) k_rumble_9311)
           else
             k_rumble_9311 (fst sp_9563, x_1013))
  in
  let main_1015 s_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 =
    let s__n_5534 k_main_s__n_9583 = rand_int_cps () (fun x_9585 -> k_main_s__n_9583 (s_5528, x_9585)) in
    s__n_5534
      (fun s__n_9667 ->
         let s__n_5538 k_main_s__n_9601 = rand_int_cps () (fun x_9603 -> k_main_s__n_9601 (fst s__n_9667, x_9603)) in
         s__n_5538
           (fun s__n_9666 ->
              let s__r_rumble_5542 k_main_s__r_rumble_9627 =
                (rumble_1011 (snd s__n_9667) (fst s__n_9666) set_flag_5529 0 0) (snd s__n_9666) k_main_s__r_rumble_9627
              in
              s__r_rumble_5542
                (fun s__r_rumble_9665 ->
                   let s__r_rumble_5546 k_main_s__r_rumble_9644 =
                     (rumble_1011 (snd s__n_9667) (fst s__r_rumble_9665) set_flag_5529 0 0)
                       (snd s__r_rumble_9665) k_main_s__r_rumble_9644
                   in
                   s__r_rumble_5546
                     (fun s__r_rumble_9664 ->
                        (print_1010 (fst s__r_rumble_9664) set_flag_5529 0 0) (snd s__r_rumble_9664) k_main_9579))))
  in
  let s__r_main_5552 k_s__r_main_9745 = ((((main_1015 (false)) false) 0) 0) () k_s__r_main_9745 in
  s__r_main_5552 (fun s__r_main_9751 -> {end}) # [ACPS])

###remove_pair:
 (let rec print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 =
    print_1010 true set_flag_5476 0 0 x_1012 k_print_9272
  and rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_9315 =
        let u_5500 k_rumble_x_u_9347 =
          if not s0_5490
          then
            let u_8717 k_rumble_x_u_u_9331 =
              if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)
              then
                k_rumble_x_u_u_9331 ()
              else
                _|_
            in
            u_8717
              (fun u_9345 ->
                 if (-x_1013) + ((1 * y_1014) + 0) >= 0
                 then
                   k_rumble_x_u_9347 ()
                 else
                   <|fail|> () k_rumble_x_u_9347)
          else
            k_rumble_x_u_9347 ()
        in
        u_5500 (fun u_9364 -> rand_int_cps () (fun x_9352 -> k_rumble_x_9315 (x_9352 = 0)))
      in
      x_5494
        (fun x_9464 ->
           let sp_5510 k_rumble_sp_9396 =
             if x_9464 then k_rumble_sp_9396 false x_1013 y_1014 else k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493
           in
           sp_5510
             (fun sp00_9463 sp10_9463 sp11_9463 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_9405 ->
                       if x_9405 > 0
                       then
                         rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311
                       else
                         rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311)
                else
                  k_rumble_9311 sp00_9463 x_1013))
    else
      if x_1013 < y_1014
      then
        rand_int_cps
          () 
          (fun x_9505 ->
             if x_9505 > 0
             then
               rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311
             else
               rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311)
      else
        k_rumble_9311 false x_1013
  in
  let main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 =
    let s__n_5534 k_main_s__n_9583 = rand_int_cps () (fun x_9585 -> k_main_s__n_9583 s0_5528 x_9585) in
    s__n_5534
      (fun s__n00_9667 s__n1_9667 ->
         let s__n_5538 k_main_s__n_9601 = rand_int_cps () (fun x_9603 -> k_main_s__n_9601 s__n00_9667 x_9603) in
         s__n_5538
           (fun s__n00_9666 s__n1_9666 ->
              rumble_1011
                s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666 
                (fun s__r_rumble00_9665 s__r_rumble1_9665 ->
                   rumble_1011
                     s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 
                     s__r_rumble1_9665 
                     (fun s__r_rumble00_9664 s__r_rumble1_9664 ->
                        print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579))))
  in
  main_1015 false false 0 0 () (fun s__r_main00_9751 s__r_main1_9751 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 3)::
Main: main_10687
  main_10687 -> (main_1015 false false 0 0 () f_10701).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when b_10703 ->
      (rand_int (f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not b_10703) -> (k_rumble_9311 false x_1013).
  f_10701 s__r_main00_9751 s__r_main1_9751 -> end.
  f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579 s__n00_9667 s__n1_9667 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071
       (f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579)).
  f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579 s__n00_9666 s__n1_9666 ->
      (rumble_1011 s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666
       (f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071
        k_main_9579)).
  f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071 
  k_main_9579 s__r_rumble00_9665 s__r_rumble1_9665 ->
      (rumble_1011 s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 s__r_rumble1_9665
       (f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665
        s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579)).
  f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665 
  s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579 s__r_rumble00_9664 s__r_rumble1_9664 ->
      (print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579).
  f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9464 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014
       (f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014
        k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (not (x_1013 < y_1014)) -> (k_rumble_9311 sp00_9463 x_1013).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (x_9405 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (not (x_9405 > 0)) ->
      (rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (x_9505 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (not (x_9505 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311).
  f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 x_9585 ->
      (k_main_s__n_9583 s0_5528 x_9585).
  f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 x_9603 ->
      (k_main_s__n_9601 s__n00_9667 x_9603).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_9347 ()).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> (fail_10704 true k_rumble_x_u_9347).
  f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 u_9364 ->
      (rand_int (f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315)).
  f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315 x_9352 ->
      (k_rumble_x_9315 (x_9352 = 0)).
  fail_10704 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_9272).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not set_flag_5491) ->
      (br_rumble_10702 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 ->
      (rand_int (f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 ->
      (rand_int (f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when x_9464 ->
      (k_rumble_sp_9396 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when 
      (not x_9464) -> (k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not (not s0_5490)) -> (k_rumble_x_u_9347 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_9331 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) -> 
      _|_.
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315)).
Types:
  main_10687 : X
  br_rumble_10702 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_10692 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_10693 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_10694 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_10688 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_10704 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_10687 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_10695 ... --> 
  f_main_10696 ... --> 
  s__n_5538 ... --> 
  f_s__n_10697 ... --> 
  f_main_10698 ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_10688 [2/2] ... --> 
  fail_10704 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(3-3) Checking counterexample ... DONE!

(3-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_10687
  main_10687 -> (main_1015 false false 0 0 () f_10701).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when b_10703 ->
      (rand_int (f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not b_10703) -> (k_rumble_9311 false x_1013).
  f_10701 s__r_main00_9751 s__r_main1_9751 -> end.
  f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579 s__n00_9667 s__n1_9667 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071
       (f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579)).
  f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579 s__n00_9666 s__n1_9666 ->
      (rumble_1011 s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666
       (f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071
        k_main_9579)).
  f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071 
  k_main_9579 s__r_rumble00_9665 s__r_rumble1_9665 ->
      (rumble_1011 s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 s__r_rumble1_9665
       (f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665
        s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579)).
  f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665 
  s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579 s__r_rumble00_9664 s__r_rumble1_9664 ->
      (print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579).
  f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9464 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014
       (f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014
        k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (not (x_1013 < y_1014)) -> (k_rumble_9311 sp00_9463 x_1013).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (x_9405 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (not (x_9405 > 0)) ->
      (rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (x_9505 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (not (x_9505 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311).
  f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 x_9585 ->
      (k_main_s__n_9583 s0_5528 x_9585).
  f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 x_9603 ->
      (k_main_s__n_9601 s__n00_9667 x_9603).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_9347 ()).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> (fail_10704 true k_rumble_x_u_9347).
  f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 u_9364 ->
      (rand_int (f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315)).
  f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315 x_9352 ->
      (k_rumble_x_9315 (x_9352 = 0)).
  fail_10704 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_9272).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not set_flag_5491) ->
      (br_rumble_10702 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 ->
      (rand_int (f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 ->
      (rand_int (f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when x_9464 ->
      (k_rumble_sp_9396 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when 
      (not x_9464) -> (k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not (not s0_5490)) -> (k_rumble_x_u_9347 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_9331 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) -> 
      _|_.
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315)).
Types:
  main_10687 : X
  br_rumble_10702 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_10692 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_10693 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_10694 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_10688 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_10704 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> x_4:bool -> int -> int -> int[(not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Error trace::
  main_10687 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_10695 ... --> 
  f_main_10696 ... --> 
  s__n_5538 ... --> 
  f_s__n_10697 ... --> 
  f_main_10698 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_10702 [1/2] ... --> 
  f_rumble_10694 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_10688 [2/2] ... --> 
  fail_10704 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1; 0

(4-3) Checking counterexample ... DONE!

(4-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 5)::
Main: main_10687
  main_10687 -> (main_1015 false false 0 0 () f_10701).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when b_10703 ->
      (rand_int (f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not b_10703) -> (k_rumble_9311 false x_1013).
  f_10701 s__r_main00_9751 s__r_main1_9751 -> end.
  f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579 s__n00_9667 s__n1_9667 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071
       (f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579)).
  f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579 s__n00_9666 s__n1_9666 ->
      (rumble_1011 s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666
       (f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071
        k_main_9579)).
  f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071 
  k_main_9579 s__r_rumble00_9665 s__r_rumble1_9665 ->
      (rumble_1011 s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 s__r_rumble1_9665
       (f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665
        s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579)).
  f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665 
  s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579 s__r_rumble00_9664 s__r_rumble1_9664 ->
      (print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579).
  f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9464 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014
       (f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014
        k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (not (x_1013 < y_1014)) -> (k_rumble_9311 sp00_9463 x_1013).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (x_9405 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (not (x_9405 > 0)) ->
      (rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (x_9505 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (not (x_9505 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311).
  f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 x_9585 ->
      (k_main_s__n_9583 s0_5528 x_9585).
  f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 x_9603 ->
      (k_main_s__n_9601 s__n00_9667 x_9603).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_9347 ()).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> (fail_10704 true k_rumble_x_u_9347).
  f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 u_9364 ->
      (rand_int (f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315)).
  f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315 x_9352 ->
      (k_rumble_x_9315 (x_9352 = 0)).
  fail_10704 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_9272).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not set_flag_5491) ->
      (br_rumble_10702 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 ->
      (rand_int (f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 ->
      (rand_int (f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when x_9464 ->
      (k_rumble_sp_9396 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when 
      (not x_9464) -> (k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not (not s0_5490)) -> (k_rumble_x_u_9347 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_9331 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) -> 
      _|_.
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315)).
Types:
  main_10687 : X
  br_rumble_10702 : (x_2:bool ->
                     x_3:int ->
                     bool -> bool -> int -> int -> x_8:int[1 <= -x_3 + x_8 || (not x_2)] -> (bool -> int -> X) -> X)
  f_rumble_10692 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_10693 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_10694 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (bool -> int -> X) -> int[1 <= -x_6 + x_7] -> X)
  f_u_10688 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (unit -> X) -> unit[x_7 >= x_6] -> X)
  fail_10704 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int -> bool -> x_4:bool -> int -> int -> x_7:int[x_7 >= x_2; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> x_6:int -> x_7:int[x_7 >= x_6] -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(5-1) Abstracting ... DONE!

(5-2) Checking HORS ... DONE!

Error trace::
  main_10687 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_10695 ... --> 
  f_main_10696 ... --> 
  s__n_5538 ... --> 
  f_s__n_10697 ... --> 
  f_main_10698 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_10702 [1/2] ... --> 
  f_rumble_10694 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [2/2] ... --> 
  f_x_10689 ... --> 
  f_x_10690 ... --> 
  f_rumble_10691 ... --> 
  sp_5510 [1/2] ... --> 
  f_rumble_10692 [1/2] ... --> 
  f_rumble_10693 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_10688 [2/2] ... --> 
  fail_10704 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(5-3) Checking counterexample ... DONE!

(5-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 6)::
Main: main_10687
  main_10687 -> (main_1015 false false 0 0 () f_10701).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when b_10703 ->
      (rand_int (f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not b_10703) -> (k_rumble_9311 false x_1013).
  f_10701 s__r_main00_9751 s__r_main1_9751 -> end.
  f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579 s__n00_9667 s__n1_9667 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071
       (f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579)).
  f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579 s__n00_9666 s__n1_9666 ->
      (rumble_1011 s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666
       (f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071
        k_main_9579)).
  f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071 
  k_main_9579 s__r_rumble00_9665 s__r_rumble1_9665 ->
      (rumble_1011 s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 s__r_rumble1_9665
       (f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665
        s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579)).
  f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665 
  s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579 s__r_rumble00_9664 s__r_rumble1_9664 ->
      (print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579).
  f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9464 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014
       (f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014
        k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (not (x_1013 < y_1014)) -> (k_rumble_9311 sp00_9463 x_1013).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (x_9405 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (not (x_9405 > 0)) ->
      (rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (x_9505 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (not (x_9505 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311).
  f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 x_9585 ->
      (k_main_s__n_9583 s0_5528 x_9585).
  f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 x_9603 ->
      (k_main_s__n_9601 s__n00_9667 x_9603).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_9347 ()).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> (fail_10704 true k_rumble_x_u_9347).
  f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 u_9364 ->
      (rand_int (f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315)).
  f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315 x_9352 ->
      (k_rumble_x_9315 (x_9352 = 0)).
  fail_10704 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_9272).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not set_flag_5491) ->
      (br_rumble_10702 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 ->
      (rand_int (f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 ->
      (rand_int (f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when x_9464 ->
      (k_rumble_sp_9396 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when 
      (not x_9464) -> (k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not (not s0_5490)) -> (k_rumble_x_u_9347 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_9331 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) -> 
      _|_.
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315)).
Types:
  main_10687 : X
  br_rumble_10702 : (x_2:bool ->
                     x_3:int ->
                     bool -> bool -> int -> int -> x_8:int[1 <= -x_3 + x_8 || (not x_2)] -> (bool -> int -> X) -> X)
  f_rumble_10692 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_10693 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_10694 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (bool -> int -> X) -> int[1 <= -x_6 + x_7] -> X)
  f_u_10688 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (unit -> X) -> unit[x_7 >= x_6] -> X)
  fail_10704 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 x_3:bool ->
                 x_4:bool -> int -> int -> x_7:int[(not x_3); x_7 >= x_2; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> x_4:bool -> bool -> x_6:int -> x_7:int[(not x_4); x_7 >= x_6] -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(6-1) Abstracting ... DONE!

(6-2) Checking HORS ... DONE!

Error trace::
  main_10687 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_10695 ... --> 
  f_main_10696 ... --> 
  s__n_5538 ... --> 
  f_s__n_10697 ... --> 
  f_main_10698 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_10702 [1/2] ... --> 
  f_rumble_10694 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_10688 [1/2] ... --> 
  f_x_10689 ... --> 
  f_x_10690 ... --> 
  f_rumble_10691 ... --> 
  sp_5510 [1/2] ... --> 
  f_rumble_10692 [1/2] ... --> 
  f_rumble_10693 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_10688 [2/2] ... --> 
  fail_10704 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(6-3) Checking counterexample ... DONE!

(6-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 7)::
Main: main_10687
  main_10687 -> (main_1015 false false 0 0 () f_10701).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when b_10703 ->
      (rand_int (f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  br_rumble_10702 b_10703 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not b_10703) -> (k_rumble_9311 false x_1013).
  f_10701 s__r_main00_9751 s__r_main1_9751 -> end.
  f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579 s__n00_9667 s__n1_9667 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071
       (f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579)).
  f_main_10698 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_9579 s__n00_9666 s__n1_9666 ->
      (rumble_1011 s__n1_9667 s__n00_9666 set_flag_5529 0 0 s__n1_9666
       (f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071
        k_main_9579)).
  f_main_10699 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 set_flag_5529 x_2071 
  k_main_9579 s__r_rumble00_9665 s__r_rumble1_9665 ->
      (rumble_1011 s__n1_9667 s__r_rumble00_9665 set_flag_5529 0 0 s__r_rumble1_9665
       (f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665
        s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579)).
  f_main_10700 p_x_5530 p_y_5531 s0_5528 s__n00_9666 s__n00_9667 s__n1_9666 s__n1_9667 s__r_rumble00_9665 
  s__r_rumble1_9665 set_flag_5529 x_2071 k_main_9579 s__r_rumble00_9664 s__r_rumble1_9664 ->
      (print_1010 s__r_rumble00_9664 set_flag_5529 0 0 s__r_rumble1_9664 k_main_9579).
  f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9464 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014
       (f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014
        k_rumble_9311)).
  f_rumble_10692 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_9311 sp00_9463 sp10_9463 
  sp11_9463 when (not (x_1013 < y_1014)) -> (k_rumble_9311 sp00_9463 x_1013).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (x_9405 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_9463 true sp10_9463 sp11_9463 y_1014 k_rumble_9311).
  f_rumble_10693 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_9463 sp10_9463 sp11_9463 x_1013 x_9464 y_1014 
  k_rumble_9311 x_9405 when (not (x_9405 > 0)) ->
      (rumble_1011 x_1013 sp00_9463 true sp10_9463 sp11_9463 (y_1014 - 1) k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (x_9505 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_9311).
  f_rumble_10694 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311 x_9505 when 
      (not (x_9505 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_9311).
  f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 x_9585 ->
      (k_main_s__n_9583 s0_5528 x_9585).
  f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 x_9603 ->
      (k_main_s__n_9601 s__n00_9667 x_9603).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_9347 ()).
  f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 u_9345 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> (fail_10704 true k_rumble_x_u_9347).
  f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 u_9364 ->
      (rand_int (f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315)).
  f_x_10690 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_9364 x_1013 y_1014 k_rumble_x_9315 x_9352 ->
      (k_rumble_x_9315 (x_9352 = 0)).
  fail_10704 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_9579 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_10696 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_9579)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_9272 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_9272).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_10691 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_9311)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311 when 
      (not set_flag_5491) ->
      (br_rumble_10702 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_9311).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583 ->
      (rand_int (f_s__n_10695 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_9583)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601 ->
      (rand_int (f_s__n_10697 p_x_5530 p_y_5531 s0_5528 s__n00_9667 s__n1_9667 set_flag_5529 x_2071 k_main_s__n_9601)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when x_9464 ->
      (k_rumble_sp_9396 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_9464 y_1014 k_rumble_sp_9396 when 
      (not x_9464) -> (k_rumble_sp_9396 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_10688 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_9347 when 
      (not (not s0_5490)) -> (k_rumble_x_u_9347 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_9331 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_9331 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) -> 
      _|_.
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_10689 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_9315)).
Types:
  main_10687 : X
  br_rumble_10702 : (x_2:bool ->
                     x_3:int ->
                     bool -> bool -> int -> int -> x_8:int[1 <= -x_3 + x_8 || (not x_2)] -> (bool -> int -> X) -> X)
  f_rumble_10692 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_10693 : (int ->
                    int ->
                    bool ->
                    bool ->
                    bool ->
                    int -> int -> x_9:int -> bool -> x_11:int -> (bool -> int -> X) -> int[1 <= -x_9 + x_11] -> X)
  f_rumble_10694 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (bool -> int -> X) -> int[1 <= -x_6 + x_7] -> X)
  f_u_10688 : (int -> int -> bool -> bool -> x_6:int -> x_7:int -> (unit -> X) -> unit[x_7 >= x_6] -> X)
  fail_10704 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 x_3:bool ->
                 x_4:bool -> int -> int -> x_7:int[(not x_3); x_7 >= x_2; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> x_4:bool -> bool -> x_6:int -> x_7:int[(not x_4); x_7 >= x_6] -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(7-1) Abstracting ... DONE!

(7-2) Checking HORS ... DONE!

Safe!

###set_main:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   let u_2011 = snd ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = assert ((-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)) in
           if (-x_1013) + ((1 * y_1014) + 0) >= 0 then () else _|_ ()
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let s_5553 = fst s__r_main_5552 in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###beta_reduce_trivial:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = assert ((-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)) in
           if (-x_1013) + ((1 * y_1014) + 0) >= 0 then () else _|_ ()
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5495 = fst sp_5510 in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5495 true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 s_5495 true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (s_5495, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let s_5520 = fst sp_5519 in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) s_5520 true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 s_5520 true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (s_5520, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s_5535 = fst s__n_5534 in
   let a_1016 = snd s__n_5534 in
   let s__n_5538 = (s_5535, rand_int ()) in
   let s_5539 = fst s__n_5538 in
   let b_1017 = snd s__n_5538 in
   let s__r_rumble_5542 = rumble_1011 a_1016 s_5539 set_flag_5529 0 0 b_1017 in
   let s_5543 = fst s__r_rumble_5542 in
   let r_rumble_2145 = snd s__r_rumble_5542 in
   let s__r_rumble_5546 = rumble_1011 a_1016 s_5543 set_flag_5529 0 0 r_rumble_2145 in
   let s_5547 = fst s__r_rumble_5546 in
   let r_rumble_2146 = snd s__r_rumble_5546 in
   print_1010 s_5547 set_flag_5529 0 0 r_rumble_2146
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 let r_main_2147 = snd s__r_main_5552 in
 r_main_2147

###inline:
 let rec print_1010 (s_5475:(bool)) (set_flag_5476:bool) (p_x_5477:int) (p_y_5478:int) (x_1012:int) =
   let s_5483 = fst ((true), ()) in
   print_1010 s_5483 set_flag_5476 0 0 x_1012
 and rumble_1011 (x_1013:int) (s_5490:(bool)) (set_flag_5491:bool) (p_x_5492:int) (p_y_5493:int) (y_1014:int) =
   if set_flag_5491
   then
     let x_5494 =
       let u_5500 =
         if not (#0 s_5490)
         then
           let u_8717 = assert ((-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)) in
           if (-x_1013) + ((1 * y_1014) + 0) >= 0 then () else _|_ ()
       in
       rand_int () = 0
     in
     let sp_5510 = if x_5494 then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5497 = fst (snd sp_5510) in
     let p_y_5498 = snd (snd sp_5510) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5510) true p_x_5497 p_y_5498 y_1014
       else
         rumble_1011 x_1013 (fst sp_5510) true p_x_5497 p_y_5498 (y_1014 - 1)
     else
       (fst sp_5510, x_1013)
   else
     let sp_5519 = if true then ((false), (x_1013, y_1014)) else (s_5490, (p_x_5492, p_y_5493)) in
     let p_x_5522 = fst (snd sp_5519) in
     let p_y_5523 = snd (snd sp_5519) in
     if x_1013 < y_1014
     then
       if rand_int () > 0
       then
         rumble_1011 (x_1013 + 1) (fst sp_5519) true p_x_5522 p_y_5523 y_1014
       else
         rumble_1011 x_1013 (fst sp_5519) true p_x_5522 p_y_5523 (y_1014 - 1)
     else
       (fst sp_5519, x_1013)
 in
 let main_1015 (s_5528:(bool)) (set_flag_5529:bool) (p_x_5530:int) (p_y_5531:int) (x_2071:unit) =
   let s__n_5534 = (s_5528, rand_int ()) in
   let s__n_5538 = (fst s__n_5534, rand_int ()) in
   let s__r_rumble_5542 =
     rumble_1011 (snd s__n_5534) (fst s__n_5538) set_flag_5529 0 0 (snd s__n_5538)
   in
   let s__r_rumble_5546 =
     rumble_1011
       (snd s__n_5534) (fst s__r_rumble_5542) set_flag_5529 0 0 (snd s__r_rumble_5542)
   in
   print_1010 (fst s__r_rumble_5546) set_flag_5529 0 0 (snd s__r_rumble_5546)
 in
 let s__r_main_5552 = main_1015 (false) false 0 0 () in
 snd s__r_main_5552

###CPS:
 (let rec print_1010 s_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 =
    (fun s_16918 -> (print_1010 s_16918 set_flag_5476 0 0) x_1012 k_print_15811) (true)
  and rumble_1011 x_1013 s_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_15854 =
        let u_5500 k_rumble_x_u_15886 =
          if not (#0 s_5490)
          then
            let u_8717 k_rumble_x_u_u_15865 =
              if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)
              then
                k_rumble_x_u_u_15865 ()
              else
                <|fail|> () k_rumble_x_u_u_15865
            in
            u_8717 (fun u_15884 -> if (-x_1013) + ((1 * y_1014) + 0) >= 0 then k_rumble_x_u_15886 () else _|_)
          else
            k_rumble_x_u_15886 ()
        in
        u_5500 (fun u_15903 -> rand_int_cps () (fun x_15891 -> k_rumble_x_15854 (x_15891 = 0)))
      in
      x_5494
        (fun x_16003 ->
           let sp_5510 k_rumble_sp_15935 =
             if x_16003
             then
               k_rumble_sp_15935 ((false), (x_1013, y_1014))
             else
               k_rumble_sp_15935 (s_5490, (p_x_5492, p_y_5493))
           in
           sp_5510
             (fun sp_16002 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_15944 ->
                       if x_15944 > 0
                       then
                         (rumble_1011
                           (x_1013 + 1) (fst sp_16002) true (fst (snd sp_16002)) (snd (snd sp_16002)))
                           y_1014 k_rumble_15850
                       else
                         (rumble_1011 x_1013 (fst sp_16002) true (fst (snd sp_16002)) (snd (snd sp_16002)))
                           (y_1014 - 1) k_rumble_15850)
                else
                  k_rumble_15850 (fst sp_16002, x_1013)))
    else
      let sp_5519 k_rumble_sp_16035 = k_rumble_sp_16035 ((false), (x_1013, y_1014)) in
      sp_5519
        (fun sp_16102 ->
           if x_1013 < y_1014
           then
             rand_int_cps
               () 
               (fun x_16044 ->
                  if x_16044 > 0
                  then
                    (rumble_1011 (x_1013 + 1) (fst sp_16102) true (fst (snd sp_16102)) (snd (snd sp_16102)))
                      y_1014 k_rumble_15850
                  else
                    (rumble_1011 x_1013 (fst sp_16102) true (fst (snd sp_16102)) (snd (snd sp_16102)))
                      (y_1014 - 1) k_rumble_15850)
           else
             k_rumble_15850 (fst sp_16102, x_1013))
  in
  let main_1015 s_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 =
    let s__n_5534 k_main_s__n_16122 = rand_int_cps () (fun x_16124 -> k_main_s__n_16122 (s_5528, x_16124)) in
    s__n_5534
      (fun s__n_16206 ->
         let s__n_5538 k_main_s__n_16140 =
           rand_int_cps () (fun x_16142 -> k_main_s__n_16140 (fst s__n_16206, x_16142))
         in
         s__n_5538
           (fun s__n_16205 ->
              let s__r_rumble_5542 k_main_s__r_rumble_16166 =
                (rumble_1011 (snd s__n_16206) (fst s__n_16205) set_flag_5529 0 0)
                  (snd s__n_16205) k_main_s__r_rumble_16166
              in
              s__r_rumble_5542
                (fun s__r_rumble_16204 ->
                   let s__r_rumble_5546 k_main_s__r_rumble_16183 =
                     (rumble_1011 (snd s__n_16206) (fst s__r_rumble_16204) set_flag_5529 0 0)
                       (snd s__r_rumble_16204) k_main_s__r_rumble_16183
                   in
                   s__r_rumble_5546
                     (fun s__r_rumble_16203 ->
                        (print_1010 (fst s__r_rumble_16203) set_flag_5529 0 0)
                          (snd s__r_rumble_16203) k_main_16118))))
  in
  let s__r_main_5552 k_s__r_main_16284 = ((((main_1015 (false)) false) 0) 0) () k_s__r_main_16284 in
  s__r_main_5552 (fun s__r_main_16290 -> {end}) # [ACPS])

###remove_pair:
 (let rec print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 =
    print_1010 true set_flag_5476 0 0 x_1012 k_print_15811
  and rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 =
    if set_flag_5491
    then
      let x_5494 k_rumble_x_15854 =
        let u_5500 k_rumble_x_u_15886 =
          if not s0_5490
          then
            let u_8717 k_rumble_x_u_u_15865 =
              if (-p_x_5492) + ((1 * p_y_5493) + 0) > (-x_1013) + ((1 * y_1014) + 0)
              then
                k_rumble_x_u_u_15865 ()
              else
                <|fail|> () k_rumble_x_u_u_15865
            in
            u_8717 (fun u_15884 -> if (-x_1013) + ((1 * y_1014) + 0) >= 0 then k_rumble_x_u_15886 () else _|_)
          else
            k_rumble_x_u_15886 ()
        in
        u_5500 (fun u_15903 -> rand_int_cps () (fun x_15891 -> k_rumble_x_15854 (x_15891 = 0)))
      in
      x_5494
        (fun x_16003 ->
           let sp_5510 k_rumble_sp_15935 =
             if x_16003
             then
               k_rumble_sp_15935 false x_1013 y_1014
             else
               k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493
           in
           sp_5510
             (fun sp00_16002 sp10_16002 sp11_16002 ->
                if x_1013 < y_1014
                then
                  rand_int_cps
                    () 
                    (fun x_15944 ->
                       if x_15944 > 0
                       then
                         rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850
                       else
                         rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850)
                else
                  k_rumble_15850 sp00_16002 x_1013))
    else
      if x_1013 < y_1014
      then
        rand_int_cps
          () 
          (fun x_16044 ->
             if x_16044 > 0
             then
               rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850
             else
               rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850)
      else
        k_rumble_15850 false x_1013
  in
  let main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 =
    let s__n_5534 k_main_s__n_16122 = rand_int_cps () (fun x_16124 -> k_main_s__n_16122 s0_5528 x_16124) in
    s__n_5534
      (fun s__n00_16206 s__n1_16206 ->
         let s__n_5538 k_main_s__n_16140 =
           rand_int_cps () (fun x_16142 -> k_main_s__n_16140 s__n00_16206 x_16142)
         in
         s__n_5538
           (fun s__n00_16205 s__n1_16205 ->
              rumble_1011
                s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205 
                (fun s__r_rumble00_16204 s__r_rumble1_16204 ->
                   rumble_1011
                     s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 
                     0 s__r_rumble1_16204 
                     (fun s__r_rumble00_16203 s__r_rumble1_16203 ->
                        print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118))))
  in
  main_1015 false false 0 0 () (fun s__r_main00_16290 s__r_main1_16290 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 8)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_17232 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(8-1) Abstracting ... DONE!

(8-2) Checking HORS ... DONE!

Error trace::
  main_17226 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_17234 ... --> 
  f_main_17235 ... --> 
  s__n_5538 ... --> 
  f_s__n_17236 ... --> 
  f_main_17237 ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [2/2] ... --> 
  fail_17243 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(8-3) Checking counterexample ... DONE!

(8-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 0

Program with abstraction types (CEGAR-cycle 9)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_17232 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> x_4:bool -> int -> int -> int[(not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)
  u_8717 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> X)

(9-1) Abstracting ... DONE!

(9-2) Checking HORS ... DONE!

Error trace::
  main_17226 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_17234 ... --> 
  f_main_17235 ... --> 
  s__n_5538 ... --> 
  f_s__n_17236 ... --> 
  f_main_17237 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_17241 [1/2] ... --> 
  f_rumble_17233 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [2/2] ... --> 
  fail_17243 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(9-3) Checking counterexample ... DONE!

(9-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 10)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_17232 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 bool ->
                 x_4:bool ->
                 x_5:int -> x_6:int -> x_7:int[1 <= x_2 - x_5 + x_6 - x_7; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (x_2:int -> x_3:int -> bool -> bool -> x_6:int -> x_7:int[1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)
  u_8717 : (x_2:int -> x_3:int -> bool -> bool -> x_6:int -> x_7:int[1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)

(10-1) Abstracting ... DONE!

(10-2) Checking HORS ... DONE!

Error trace::
  main_17226 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_17234 ... --> 
  f_main_17235 ... --> 
  s__n_5538 ... --> 
  f_s__n_17236 ... --> 
  f_main_17237 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_17241 [1/2] ... --> 
  f_rumble_17233 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [2/2] ... --> 
  f_x_17228 ... --> 
  f_x_17229 ... --> 
  f_rumble_17230 ... --> 
  sp_5510 [1/2] ... --> 
  f_rumble_17231 [1/2] ... --> 
  f_rumble_17232 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [2/2] ... --> 
  fail_17243 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(10-3) Checking counterexample ... DONE!

(10-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 11)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> X) -> bool -> int -> int -> X)
  f_rumble_17232 : (int ->
                    int -> bool -> bool -> bool -> int -> int -> int -> bool -> int -> (bool -> int -> X) -> int -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 x_3:bool ->
                 x_4:bool ->
                 x_5:int ->
                 x_6:int -> x_7:int[(not x_3); 1 <= x_2 - x_5 + x_6 - x_7; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int -> int -> bool -> bool -> int -> bool -> int -> (bool -> int -> int -> X) -> X)
  u_5500 : (x_2:int ->
            x_3:int ->
            x_4:bool -> bool -> x_6:int -> x_7:int[(not x_4); 1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)
  u_8717 : (x_2:int -> x_3:int -> bool -> bool -> x_6:int -> x_7:int[1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)

(11-1) Abstracting ... DONE!

(11-2) Checking HORS ... DONE!

Error trace::
  main_17226 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_17234 ... --> 
  f_main_17235 ... --> 
  s__n_5538 ... --> 
  f_s__n_17236 ... --> 
  f_main_17237 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_17241 [1/2] ... --> 
  f_rumble_17233 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_17227 [1/2] ... --> 
  f_x_17228 ... --> 
  f_x_17229 ... --> 
  f_rumble_17230 ... --> 
  sp_5510 [1/2] ... --> 
  f_rumble_17231 [1/2] ... --> 
  f_rumble_17232 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [2/2] ... --> 
  fail_17243 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0

(11-3) Checking counterexample ... DONE!

(11-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 12)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int ->
                    int ->
                    bool ->
                    bool ->
                    x_6:int ->
                    bool ->
                    x_8:int -> (bool -> int -> X) -> bool -> x_14:int -> x_15:int[x_15 >= -x_6 + x_8 + x_14] -> X)
  f_rumble_17232 : (int ->
                    int ->
                    bool ->
                    bool ->
                    bool ->
                    x_7:int ->
                    x_8:int -> x_9:int -> bool -> x_11:int -> (bool -> int -> X) -> int[x_11 <= -x_7 + x_8 + x_9] -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 x_3:bool ->
                 x_4:bool ->
                 x_5:int ->
                 x_6:int -> x_7:int[(not x_3); 1 <= x_2 - x_5 + x_6 - x_7; (not x_4)] -> (bool -> int -> X) -> X)
  sp_5510 : (int ->
             int ->
             bool ->
             bool -> x_6:int -> bool -> x_8:int -> (bool -> x_11:int -> x_12:int[x_12 >= -x_6 + x_8 + x_11] -> X) -> X)
  u_5500 : (x_2:int ->
            x_3:int ->
            x_4:bool -> bool -> x_6:int -> x_7:int[(not x_4); 1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)
  u_8717 : (x_2:int -> x_3:int -> bool -> bool -> x_6:int -> x_7:int[1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)

(12-1) Abstracting ... DONE!

(12-2) Checking HORS ... DONE!

Error trace::
  main_17226 ... --> 
  main_1015 ... --> 
  s__n_5534 ... --> 
  f_s__n_17234 ... --> 
  f_main_17235 ... --> 
  s__n_5538 ... --> 
  f_s__n_17236 ... --> 
  f_main_17237 ... --> 
  rumble_1011 [2/2] ... --> 
  br_rumble_17241 [1/2] ... --> 
  f_rumble_17233 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [1/2] ... --> 
  f_u_17227 [1/2] ... --> 
  f_x_17228 ... --> 
  f_x_17229 ... --> 
  f_rumble_17230 ... --> 
  sp_5510 [2/2] ... --> 
  f_rumble_17231 [1/2] ... --> 
  f_rumble_17232 [1/2] ... --> 
  rumble_1011 [1/2] ... --> 
  x_5494 ... --> 
  u_5500 [1/2] ... --> 
  u_8717 [2/2] ... --> 
  fail_17243 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1; 0

(12-3) Checking counterexample ... DONE!

(12-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 0; 0; 0; 0; 1

Program with abstraction types (CEGAR-cycle 13)::
Main: main_17226
  main_17226 -> (main_1015 false false 0 0 () f_17240).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when b_17242 ->
      (rand_int (f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  br_rumble_17241 b_17242 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not b_17242) -> (k_rumble_15850 false x_1013).
  f_17240 s__r_main00_16290 s__r_main1_16290 -> end.
  f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118 s__n00_16206 s__n1_16206 ->
      (s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071
       (f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118)).
  f_main_17237 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_16118 s__n00_16205 
  s__n1_16205 ->
      (rumble_1011 s__n1_16206 s__n00_16205 set_flag_5529 0 0 s__n1_16205
       (f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071
        k_main_16118)).
  f_main_17238 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 set_flag_5529 x_2071 
  k_main_16118 s__r_rumble00_16204 s__r_rumble1_16204 ->
      (rumble_1011 s__n1_16206 s__r_rumble00_16204 set_flag_5529 0 0 s__r_rumble1_16204
       (f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204
        s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118)).
  f_main_17239 p_x_5530 p_y_5531 s0_5528 s__n00_16205 s__n00_16206 s__n1_16205 s__n1_16206 s__r_rumble00_16204 
  s__r_rumble1_16204 set_flag_5529 x_2071 k_main_16118 s__r_rumble00_16203 s__r_rumble1_16203 ->
      (print_1010 s__r_rumble00_16203 set_flag_5529 0 0 s__r_rumble1_16203 k_main_16118).
  f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16003 ->
      (sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014
       (f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (x_1013 < y_1014) ->
      (rand_int
       (f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014
        k_rumble_15850)).
  f_rumble_17231 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_15850 sp00_16002 sp10_16002 
  sp11_16002 when (not (x_1013 < y_1014)) -> (k_rumble_15850 sp00_16002 x_1013).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (x_15944 > 0) ->
      (rumble_1011 (x_1013 + 1) sp00_16002 true sp10_16002 sp11_16002 y_1014 k_rumble_15850).
  f_rumble_17232 p_x_5492 p_y_5493 s0_5490 set_flag_5491 sp00_16002 sp10_16002 sp11_16002 x_1013 x_16003 y_1014 
  k_rumble_15850 x_15944 when (not (x_15944 > 0)) ->
      (rumble_1011 x_1013 sp00_16002 true sp10_16002 sp11_16002 (y_1014 - 1) k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (x_16044 > 0) -> (rumble_1011 (x_1013 + 1) false true x_1013 y_1014 y_1014 k_rumble_15850).
  f_rumble_17233 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850 x_16044 when 
      (not (x_16044 > 0)) -> (rumble_1011 x_1013 false true x_1013 y_1014 (y_1014 - 1) k_rumble_15850).
  f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 x_16124 ->
      (k_main_s__n_16122 s0_5528 x_16124).
  f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 x_16142 ->
      (k_main_s__n_16140 s__n00_16206 x_16142).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0) -> (k_rumble_x_u_15886 ()).
  f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 u_15884 when 
      (not ((((-1) * x_1013) + ((1 * y_1014) + 0)) >= 0)) -> _|_.
  f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 u_15903 ->
      (rand_int (f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854)).
  f_x_17229 p_x_5492 p_y_5493 s0_5490 set_flag_5491 u_15903 x_1013 y_1014 k_rumble_x_15854 x_15891 ->
      (k_rumble_x_15854 (x_15891 = 0)).
  fail_17243 b k -> {fail} => (k ()).
  main_1015 s0_5528 set_flag_5529 p_x_5530 p_y_5531 x_2071 k_main_16118 ->
      (s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071
       (f_main_17235 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_16118)).
  print_1010 s0_5475 set_flag_5476 p_x_5477 p_y_5478 x_1012 k_print_15811 ->
      (print_1010 true set_flag_5476 0 0 x_1012 k_print_15811).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when set_flag_5491 ->
      (x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_rumble_17230 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_15850)).
  rumble_1011 x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850 when 
      (not set_flag_5491) ->
      (br_rumble_17241 (x_1013 < y_1014) x_1013 s0_5490 set_flag_5491 p_x_5492 p_y_5493 y_1014 k_rumble_15850).
  s__n_5534 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122 ->
      (rand_int (f_s__n_17234 p_x_5530 p_y_5531 s0_5528 set_flag_5529 x_2071 k_main_s__n_16122)).
  s__n_5538 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140 ->
      (rand_int
       (f_s__n_17236 p_x_5530 p_y_5531 s0_5528 s__n00_16206 s__n1_16206 set_flag_5529 x_2071 k_main_s__n_16140)).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when x_16003 ->
      (k_rumble_sp_15935 false x_1013 y_1014).
  sp_5510 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 x_16003 y_1014 k_rumble_sp_15935 when 
      (not x_16003) -> (k_rumble_sp_15935 s0_5490 p_x_5492 p_y_5493).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not s0_5490) ->
      (u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_u_17227 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886)).
  u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_15886 when 
      (not (not s0_5490)) -> (k_rumble_x_u_15886 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0))) ->
      (k_rumble_x_u_u_15865 ()).
  u_8717 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_u_u_15865 when 
      (not ((((-1) * p_x_5492) + ((1 * p_y_5493) + 0)) > (((-1) * x_1013) + ((1 * y_1014) + 0)))) ->
      (fail_17243 true k_rumble_x_u_u_15865).
  x_5494 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854 ->
      (u_5500 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014
       (f_x_17228 p_x_5492 p_y_5493 s0_5490 set_flag_5491 x_1013 y_1014 k_rumble_x_15854)).
Types:
  main_17226 : X
  br_rumble_17241 : (bool -> int -> bool -> bool -> int -> int -> int -> (bool -> int -> X) -> X)
  f_rumble_17231 : (int ->
                    int ->
                    bool ->
                    bool ->
                    x_6:int ->
                    bool ->
                    x_8:int ->
                    (bool -> int -> X) ->
                    bool -> x_14:int -> x_15:int[1 <= x_6 - x_8 - x_14 + x_15; x_15 >= -x_6 + x_8 + x_14] -> X)
  f_rumble_17232 : (int ->
                    int ->
                    bool ->
                    bool ->
                    bool ->
                    x_7:int ->
                    x_8:int ->
                    x_9:int ->
                    bool ->
                    x_11:int -> (bool -> int -> X) -> int[1 <= -x_7 + x_8 + x_9 - x_11; x_11 <= -x_7 + x_8 + x_9] -> X)
  f_rumble_17233 : (int -> int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  f_u_17227 : (int -> int -> bool -> bool -> int -> int -> (unit -> X) -> unit -> X)
  fail_17243 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (x_2:int ->
                 x_3:bool ->
                 x_4:bool ->
                 x_5:int ->
                 x_6:int ->
                 x_7:int[2 <= x_2 - x_5 + x_6 - x_7; (not x_3); 1 <= x_2 - x_5 + x_6 - x_7; (not x_4)] ->
                 (bool -> int -> X) -> X)
  sp_5510 : (x_2:int ->
             x_3:int ->
             bool ->
             bool ->
             x_6:int ->
             bool ->
             x_8:int[1 <= -x_2 + x_3 + x_6 - x_8] ->
             (bool -> x_11:int -> x_12:int[1 <= x_6 - x_8 - x_11 + x_12; x_12 >= -x_6 + x_8 + x_11] -> X) -> X)
  u_5500 : (x_2:int ->
            x_3:int ->
            x_4:bool ->
            bool ->
            x_6:int ->
            x_7:int[2 <= -x_2 + x_3 + x_6 - x_7; (not x_4); 1 <= -x_2 + x_3 + x_6 - x_7] ->
            (unit[1 <= -x_2 + x_3 + x_6 - x_7] -> X) -> X)
  u_8717 : (x_2:int ->
            x_3:int ->
            bool ->
            bool -> x_6:int -> x_7:int[2 <= -x_2 + x_3 + x_6 - x_7; 1 <= -x_2 + x_3 + x_6 - x_7] -> (unit -> X) -> X)

(13-1) Abstracting ... DONE!

(13-2) Checking HORS ... DONE!

Safe!

###set_main:
 let rec print_1010 (s_23658:(bool)) (set_flag_23659:bool) (p_x_23660:int) (x_1012:int) =
   if set_flag_23659
   then
     let x_23661 = let u_23666 = if not (#0 s_23658) then assert false in
                   rand_int () = 0 in
     let sp_23674 = if x_23661 then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let s_23662 = fst sp_23674 in
     let p_x_23664 = #0 (snd sp_23674) in
     let s_23679 = fst ((true), ()) in
     let u_2011 = snd ((true), ()) in
     print_1010 s_23679 true p_x_23664 x_1012
   else
     let sp_23684 = if true then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let s_23685 = fst sp_23684 in
     let p_x_23687 = #0 (snd sp_23684) in
     let s_23689 = fst ((true), ()) in
     let u_23690 = snd ((true), ()) in
     print_1010 s_23689 true p_x_23687 x_1012
 and rumble_1011 (x_1013:int) (s_23695:(bool)) (set_flag_23696:bool) (p_x_23697:int) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_23695 set_flag_23696 0 y_1014
     else
       rumble_1011 x_1013 s_23695 set_flag_23696 0 (y_1014 - 1)
   else
     (s_23695, x_1013)
 in
 let main_1015 (s_23708:(bool)) (set_flag_23709:bool) (p_x_23710:int) (x_2071:unit) =
   let s__n_23713 = (s_23708, rand_int ()) in
   let s_23714 = fst s__n_23713 in
   let a_1016 = snd s__n_23713 in
   let s__n_23717 = (s_23714, rand_int ()) in
   let s_23718 = fst s__n_23717 in
   let b_1017 = snd s__n_23717 in
   let s__r_rumble_23721 = rumble_1011 a_1016 s_23718 set_flag_23709 0 b_1017 in
   let s_23722 = fst s__r_rumble_23721 in
   let r_rumble_2145 = snd s__r_rumble_23721 in
   let s__r_rumble_23725 = rumble_1011 a_1016 s_23722 set_flag_23709 0 r_rumble_2145 in
   let s_23726 = fst s__r_rumble_23725 in
   let r_rumble_2146 = snd s__r_rumble_23725 in
   print_1010 s_23726 set_flag_23709 0 r_rumble_2146
 in
 let s__r_main_23731 = main_1015 (false) false 0 () in
 let s_23732 = fst s__r_main_23731 in
 let r_main_2147 = snd s__r_main_23731 in
 r_main_2147

###beta_reduce_trivial:
 let rec print_1010 (s_23658:(bool)) (set_flag_23659:bool) (p_x_23660:int) (x_1012:int) =
   if set_flag_23659
   then
     let x_23661 = let u_23666 = if not (#0 s_23658) then assert false in
                   rand_int () = 0 in
     let sp_23674 = if x_23661 then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let p_x_23664 = #0 (snd sp_23674) in
     let s_23679 = fst ((true), ()) in
     print_1010 s_23679 true p_x_23664 x_1012
   else
     let sp_23684 = if true then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let p_x_23687 = #0 (snd sp_23684) in
     let s_23689 = fst ((true), ()) in
     print_1010 s_23689 true p_x_23687 x_1012
 and rumble_1011 (x_1013:int) (s_23695:(bool)) (set_flag_23696:bool) (p_x_23697:int) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_23695 set_flag_23696 0 y_1014
     else
       rumble_1011 x_1013 s_23695 set_flag_23696 0 (y_1014 - 1)
   else
     (s_23695, x_1013)
 in
 let main_1015 (s_23708:(bool)) (set_flag_23709:bool) (p_x_23710:int) (x_2071:unit) =
   let s__n_23713 = (s_23708, rand_int ()) in
   let s_23714 = fst s__n_23713 in
   let a_1016 = snd s__n_23713 in
   let s__n_23717 = (s_23714, rand_int ()) in
   let s_23718 = fst s__n_23717 in
   let b_1017 = snd s__n_23717 in
   let s__r_rumble_23721 = rumble_1011 a_1016 s_23718 set_flag_23709 0 b_1017 in
   let s_23722 = fst s__r_rumble_23721 in
   let r_rumble_2145 = snd s__r_rumble_23721 in
   let s__r_rumble_23725 = rumble_1011 a_1016 s_23722 set_flag_23709 0 r_rumble_2145 in
   let s_23726 = fst s__r_rumble_23725 in
   let r_rumble_2146 = snd s__r_rumble_23725 in
   print_1010 s_23726 set_flag_23709 0 r_rumble_2146
 in
 let s__r_main_23731 = main_1015 (false) false 0 () in
 let r_main_2147 = snd s__r_main_23731 in
 r_main_2147

###inline:
 let rec print_1010 (s_23658:(bool)) (set_flag_23659:bool) (p_x_23660:int) (x_1012:int) =
   if set_flag_23659
   then
     let x_23661 = let u_23666 = if not (#0 s_23658) then assert false in
                   rand_int () = 0 in
     let sp_23674 = if x_23661 then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let p_x_23664 = #0 (snd sp_23674) in
     let s_23679 = fst ((true), ()) in
     print_1010 s_23679 true p_x_23664 x_1012
   else
     let sp_23684 = if true then ((false), (x_1012)) else (s_23658, (p_x_23660)) in
     let p_x_23687 = #0 (snd sp_23684) in
     let s_23689 = fst ((true), ()) in
     print_1010 s_23689 true p_x_23687 x_1012
 and rumble_1011 (x_1013:int) (s_23695:(bool)) (set_flag_23696:bool) (p_x_23697:int) (y_1014:int) =
   if x_1013 < y_1014
   then
     if rand_int () > 0
     then
       rumble_1011 (x_1013 + 1) s_23695 set_flag_23696 0 y_1014
     else
       rumble_1011 x_1013 s_23695 set_flag_23696 0 (y_1014 - 1)
   else
     (s_23695, x_1013)
 in
 let main_1015 (s_23708:(bool)) (set_flag_23709:bool) (p_x_23710:int) (x_2071:unit) =
   let s__n_23713 = (s_23708, rand_int ()) in
   let s__n_23717 = (fst s__n_23713, rand_int ()) in
   let s__r_rumble_23721 =
     rumble_1011 (snd s__n_23713) (fst s__n_23717) set_flag_23709 0 (snd s__n_23717)
   in
   let s__r_rumble_23725 =
     rumble_1011 (snd s__n_23713) (fst s__r_rumble_23721) set_flag_23709 0 (snd s__r_rumble_23721)
   in
   print_1010 (fst s__r_rumble_23725) set_flag_23709 0 (snd s__r_rumble_23725)
 in
 let s__r_main_23731 = main_1015 (false) false 0 () in
 snd s__r_main_23731

###CPS:
 (let rec print_1010 s_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 =
    if set_flag_23659
    then
      let x_23661 k_print_x_24143 =
        let u_23666 k_print_x_u_24156 =
          if not (#0 s_23658) then <|fail|> () k_print_x_u_24156 else k_print_x_u_24156 ()
        in
        u_23666 (fun u_24173 -> rand_int_cps () (fun x_24161 -> k_print_x_24143 (x_24161 = 0)))
      in
      x_23661
        (fun x_24237 ->
           let sp_23674 k_print_sp_24201 =
             if x_24237
             then
               k_print_sp_24201 ((false), (x_1012))
             else
               k_print_sp_24201 (s_23658, (p_x_23660))
           in
           sp_23674
             (fun sp_24236 ->
                (fun s_25042 -> (print_1010 s_25042 true (#0 (snd sp_24236))) x_1012 k_print_24139) (true)))
    else
      let sp_23684 k_print_sp_24265 = k_print_sp_24265 ((false), (x_1012)) in
      sp_23684
        (fun sp_24300 ->
           (fun s_25041 -> (print_1010 s_25041 true (#0 (snd sp_24300))) x_1012 k_print_24139) (true))
  and rumble_1011 x_1013 s_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 =
    if x_1013 < y_1014
    then
      rand_int_cps
        () 
        (fun x_24315 ->
           if x_24315 > 0
           then
             (rumble_1011 (x_1013 + 1) s_23695 set_flag_23696 0) y_1014 k_rumble_24312
           else
             (rumble_1011 x_1013 s_23695 set_flag_23696 0) (y_1014 - 1) k_rumble_24312)
    else
      k_rumble_24312 (s_23695, x_1013)
  in
  let main_1015 s_23708 set_flag_23709 p_x_23710 x_2071 k_main_24379 =
    let s__n_23713 k_main_s__n_24383 = rand_int_cps () (fun x_24385 -> k_main_s__n_24383 (s_23708, x_24385)) in
    s__n_23713
      (fun s__n_24464 ->
         let s__n_23717 k_main_s__n_24401 =
           rand_int_cps () (fun x_24403 -> k_main_s__n_24401 (fst s__n_24464, x_24403))
         in
         s__n_23717
           (fun s__n_24463 ->
              let s__r_rumble_23721 k_main_s__r_rumble_24426 =
                (rumble_1011 (snd s__n_24464) (fst s__n_24463) set_flag_23709 0)
                  (snd s__n_24463) k_main_s__r_rumble_24426
              in
              s__r_rumble_23721
                (fun s__r_rumble_24462 ->
                   let s__r_rumble_23725 k_main_s__r_rumble_24442 =
                     (rumble_1011 (snd s__n_24464) (fst s__r_rumble_24462) set_flag_23709 0)
                       (snd s__r_rumble_24462) k_main_s__r_rumble_24442
                   in
                   s__r_rumble_23725
                     (fun s__r_rumble_24461 ->
                        (print_1010 (fst s__r_rumble_24461) set_flag_23709 0)
                          (snd s__r_rumble_24461) k_main_24379))))
  in
  let s__r_main_23731 k_s__r_main_24523 = (((main_1015 (false)) false) 0) () k_s__r_main_24523 in
  s__r_main_23731 (fun s__r_main_24529 -> {end}) # [ACPS])

###remove_pair:
 (let rec print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 =
    if set_flag_23659
    then
      let x_23661 k_print_x_24143 =
        let u_23666 k_print_x_u_24156 =
          if not s0_23658 then <|fail|> () k_print_x_u_24156 else k_print_x_u_24156 ()
        in
        u_23666 (fun u_24173 -> rand_int_cps () (fun x_24161 -> k_print_x_24143 (x_24161 = 0)))
      in
      x_23661
        (fun x_24237 ->
           let sp_23674 k_print_sp_24201 =
             if x_24237 then k_print_sp_24201 false x_1012 else k_print_sp_24201 s0_23658 p_x_23660
           in
           sp_23674 (fun sp00_24236 sp10_24236 -> print_1010 true true sp10_24236 x_1012 k_print_24139))
    else
      print_1010 true true x_1012 x_1012 k_print_24139
  and rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 =
    if x_1013 < y_1014
    then
      rand_int_cps
        () 
        (fun x_24315 ->
           if x_24315 > 0
           then
             rumble_1011 (x_1013 + 1) s0_23695 set_flag_23696 0 y_1014 k_rumble_24312
           else
             rumble_1011 x_1013 s0_23695 set_flag_23696 0 (y_1014 - 1) k_rumble_24312)
    else
      k_rumble_24312 s0_23695 x_1013
  in
  let main_1015 s0_23708 set_flag_23709 p_x_23710 x_2071 k_main_24379 =
    let s__n_23713 k_main_s__n_24383 =
      rand_int_cps () (fun x_24385 -> k_main_s__n_24383 s0_23708 x_24385)
    in
    s__n_23713
      (fun s__n00_24464 s__n1_24464 ->
         let s__n_23717 k_main_s__n_24401 =
           rand_int_cps () (fun x_24403 -> k_main_s__n_24401 s__n00_24464 x_24403)
         in
         s__n_23717
           (fun s__n00_24463 s__n1_24463 ->
              rumble_1011
                s__n1_24464 s__n00_24463 set_flag_23709 0 s__n1_24463 
                (fun s__r_rumble00_24462 s__r_rumble1_24462 ->
                   rumble_1011
                     s__n1_24464 s__r_rumble00_24462 set_flag_23709 0 
                     s__r_rumble1_24462 
                     (fun s__r_rumble00_24461 s__r_rumble1_24461 ->
                        print_1010 s__r_rumble00_24461 set_flag_23709 0 s__r_rumble1_24461 k_main_24379))))
  in
  main_1015 false false 0 () (fun s__r_main00_24529 s__r_main1_24529 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 14)::
Main: main_25280
  main_25280 -> (main_1015 false false 0 () f_25292).
  f_25292 s__r_main00_24529 s__r_main1_24529 -> end.
  f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379 s__n00_24464 s__n1_24464 ->
      (s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071
       (f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379)).
  f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379 s__n00_24463 s__n1_24463 ->
      (rumble_1011 s__n1_24464 s__n00_24463 set_flag_23709 0 s__n1_24463
       (f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071
        k_main_24379)).
  f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071 k_main_24379 
  s__r_rumble00_24462 s__r_rumble1_24462 ->
      (rumble_1011 s__n1_24464 s__r_rumble00_24462 set_flag_23709 0 s__r_rumble1_24462
       (f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462
        s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379)).
  f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462 
  s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379 s__r_rumble00_24461 s__r_rumble1_24461 ->
      (print_1010 s__r_rumble00_24461 set_flag_23709 0 s__r_rumble1_24461 k_main_24379).
  f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139 x_24237 ->
      (sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237
       (f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139)).
  f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139 sp00_24236 sp10_24236 ->
      (print_1010 true true sp10_24236 x_1012 k_print_24139).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (x_24315 > 0) -> (rumble_1011 (x_1013 + 1) s0_23695 set_flag_23696 0 y_1014 k_rumble_24312).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (not (x_24315 > 0)) -> (rumble_1011 x_1013 s0_23695 set_flag_23696 0 (y_1014 - 1) k_rumble_24312).
  f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 x_24385 ->
      (k_main_s__n_24383 s0_23708 x_24385).
  f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 x_24403 ->
      (k_main_s__n_24401 s__n00_24464 x_24403).
  f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 u_24173 ->
      (rand_int (f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143)).
  f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143 x_24161 ->
      (k_print_x_24143 (x_24161 = 0)).
  fail_25293 b k -> {fail} => (k ()).
  main_1015 s0_23708 set_flag_23709 p_x_23710 x_2071 k_main_24379 ->
      (s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071
       (f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when set_flag_23659 ->
      (x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when 
      (not set_flag_23659) -> (print_1010 true true x_1012 x_1012 k_print_24139).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (x_1013 < y_1014) -> (rand_int (f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312)).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (not (x_1013 < y_1014)) -> (k_rumble_24312 s0_23695 x_1013).
  s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 ->
      (rand_int (f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383)).
  s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 ->
      (rand_int (f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401)).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when x_24237 ->
      (k_print_sp_24201 false x_1012).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when 
      (not x_24237) -> (k_print_sp_24201 s0_23658 p_x_23660).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not s0_23658) -> (fail_25293 true k_print_x_u_24156).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not (not s0_23658)) -> (k_print_x_u_24156 ()).
  x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 ->
      (u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143)).
Types:
  main_25280 : X
  f_rumble_25285 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_25293 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> bool -> int -> int -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> X)
  sp_23674 : (int -> bool -> bool -> int -> bool -> (bool -> int -> X) -> X)
  u_23666 : (int -> bool -> bool -> int -> (unit -> X) -> X)

(14-1) Abstracting ... DONE!

(14-2) Checking HORS ... DONE!

Error trace::
  main_25280 ... --> 
  main_1015 ... --> 
  s__n_23713 ... --> 
  f_s__n_25286 ... --> 
  f_main_25287 ... --> 
  s__n_23717 ... --> 
  f_s__n_25288 ... --> 
  f_main_25289 ... --> 
  rumble_1011 [2/2] ... --> 
  f_main_25290 ... --> 
  rumble_1011 [2/2] ... --> 
  f_main_25291 ... --> 
  print_1010 [1/2] ... --> 
  x_23661 ... --> 
  u_23666 [1/2] ... --> 
  fail_25293 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0; 0; 0; 0; 0

(14-3) Checking counterexample ... DONE!

(14-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0; 0

Program with abstraction types (CEGAR-cycle 15)::
Main: main_25280
  main_25280 -> (main_1015 false false 0 () f_25292).
  f_25292 s__r_main00_24529 s__r_main1_24529 -> end.
  f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379 s__n00_24464 s__n1_24464 ->
      (s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071
       (f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379)).
  f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379 s__n00_24463 s__n1_24463 ->
      (rumble_1011 s__n1_24464 s__n00_24463 set_flag_23709 0 s__n1_24463
       (f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071
        k_main_24379)).
  f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071 k_main_24379 
  s__r_rumble00_24462 s__r_rumble1_24462 ->
      (rumble_1011 s__n1_24464 s__r_rumble00_24462 set_flag_23709 0 s__r_rumble1_24462
       (f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462
        s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379)).
  f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462 
  s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379 s__r_rumble00_24461 s__r_rumble1_24461 ->
      (print_1010 s__r_rumble00_24461 set_flag_23709 0 s__r_rumble1_24461 k_main_24379).
  f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139 x_24237 ->
      (sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237
       (f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139)).
  f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139 sp00_24236 sp10_24236 ->
      (print_1010 true true sp10_24236 x_1012 k_print_24139).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (x_24315 > 0) -> (rumble_1011 (x_1013 + 1) s0_23695 set_flag_23696 0 y_1014 k_rumble_24312).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (not (x_24315 > 0)) -> (rumble_1011 x_1013 s0_23695 set_flag_23696 0 (y_1014 - 1) k_rumble_24312).
  f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 x_24385 ->
      (k_main_s__n_24383 s0_23708 x_24385).
  f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 x_24403 ->
      (k_main_s__n_24401 s__n00_24464 x_24403).
  f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 u_24173 ->
      (rand_int (f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143)).
  f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143 x_24161 ->
      (k_print_x_24143 (x_24161 = 0)).
  fail_25293 b k -> {fail} => (k ()).
  main_1015 s0_23708 set_flag_23709 p_x_23710 x_2071 k_main_24379 ->
      (s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071
       (f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when set_flag_23659 ->
      (x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when 
      (not set_flag_23659) -> (print_1010 true true x_1012 x_1012 k_print_24139).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (x_1013 < y_1014) -> (rand_int (f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312)).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (not (x_1013 < y_1014)) -> (k_rumble_24312 s0_23695 x_1013).
  s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 ->
      (rand_int (f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383)).
  s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 ->
      (rand_int (f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401)).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when x_24237 ->
      (k_print_sp_24201 false x_1012).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when 
      (not x_24237) -> (k_print_sp_24201 s0_23658 p_x_23660).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not s0_23658) -> (fail_25293 true k_print_x_u_24156).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not (not s0_23658)) -> (k_print_x_u_24156 ()).
  x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 ->
      (u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143)).
Types:
  main_25280 : X
  f_rumble_25285 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_25293 : (bool -> (unit -> X) -> X)
  print_1010 : (bool -> x_3:bool -> int -> int[(not x_3)] -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> X)
  sp_23674 : (int -> bool -> bool -> int -> bool -> (bool -> int -> X) -> X)
  u_23666 : (int -> bool -> bool -> int -> (unit -> X) -> X)

(15-1) Abstracting ... DONE!

(15-2) Checking HORS ... DONE!

Error trace::
  main_25280 ... --> 
  main_1015 ... --> 
  s__n_23713 ... --> 
  f_s__n_25286 ... --> 
  f_main_25287 ... --> 
  s__n_23717 ... --> 
  f_s__n_25288 ... --> 
  f_main_25289 ... --> 
  rumble_1011 [2/2] ... --> 
  f_main_25290 ... --> 
  rumble_1011 [2/2] ... --> 
  f_main_25291 ... --> 
  print_1010 [2/2] ... --> 
  print_1010 [1/2] ... --> 
  x_23661 ... --> 
  u_23666 [1/2] ... --> 
  fail_25293 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0; 1; 0; 0; 0; 0

(15-3) Checking counterexample ... DONE!

(15-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0; 0; 0; 0; 0; 0; 0; 1; 0; 1; 0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 16)::
Main: main_25280
  main_25280 -> (main_1015 false false 0 () f_25292).
  f_25292 s__r_main00_24529 s__r_main1_24529 -> end.
  f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379 s__n00_24464 s__n1_24464 ->
      (s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071
       (f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379)).
  f_main_25289 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_24379 s__n00_24463 s__n1_24463 ->
      (rumble_1011 s__n1_24464 s__n00_24463 set_flag_23709 0 s__n1_24463
       (f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071
        k_main_24379)).
  f_main_25290 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 set_flag_23709 x_2071 k_main_24379 
  s__r_rumble00_24462 s__r_rumble1_24462 ->
      (rumble_1011 s__n1_24464 s__r_rumble00_24462 set_flag_23709 0 s__r_rumble1_24462
       (f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462
        s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379)).
  f_main_25291 p_x_23710 s0_23708 s__n00_24463 s__n00_24464 s__n1_24463 s__n1_24464 s__r_rumble00_24462 
  s__r_rumble1_24462 set_flag_23709 x_2071 k_main_24379 s__r_rumble00_24461 s__r_rumble1_24461 ->
      (print_1010 s__r_rumble00_24461 set_flag_23709 0 s__r_rumble1_24461 k_main_24379).
  f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139 x_24237 ->
      (sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237
       (f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139)).
  f_print_25284 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_24139 sp00_24236 sp10_24236 ->
      (print_1010 true true sp10_24236 x_1012 k_print_24139).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (x_24315 > 0) -> (rumble_1011 (x_1013 + 1) s0_23695 set_flag_23696 0 y_1014 k_rumble_24312).
  f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312 x_24315 when 
      (not (x_24315 > 0)) -> (rumble_1011 x_1013 s0_23695 set_flag_23696 0 (y_1014 - 1) k_rumble_24312).
  f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 x_24385 ->
      (k_main_s__n_24383 s0_23708 x_24385).
  f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 x_24403 ->
      (k_main_s__n_24401 s__n00_24464 x_24403).
  f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 u_24173 ->
      (rand_int (f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143)).
  f_x_25282 p_x_23660 s0_23658 set_flag_23659 u_24173 x_1012 k_print_x_24143 x_24161 ->
      (k_print_x_24143 (x_24161 = 0)).
  fail_25293 b k -> {fail} => (k ()).
  main_1015 s0_23708 set_flag_23709 p_x_23710 x_2071 k_main_24379 ->
      (s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071
       (f_main_25287 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_24379)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when set_flag_23659 ->
      (x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_print_25283 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_24139)).
  print_1010 s0_23658 set_flag_23659 p_x_23660 x_1012 k_print_24139 when 
      (not set_flag_23659) -> (print_1010 true true x_1012 x_1012 k_print_24139).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (x_1013 < y_1014) -> (rand_int (f_rumble_25285 p_x_23697 s0_23695 set_flag_23696 x_1013 y_1014 k_rumble_24312)).
  rumble_1011 x_1013 s0_23695 set_flag_23696 p_x_23697 y_1014 k_rumble_24312 when 
      (not (x_1013 < y_1014)) -> (k_rumble_24312 s0_23695 x_1013).
  s__n_23713 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383 ->
      (rand_int (f_s__n_25286 p_x_23710 s0_23708 set_flag_23709 x_2071 k_main_s__n_24383)).
  s__n_23717 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401 ->
      (rand_int (f_s__n_25288 p_x_23710 s0_23708 s__n00_24464 s__n1_24464 set_flag_23709 x_2071 k_main_s__n_24401)).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when x_24237 ->
      (k_print_sp_24201 false x_1012).
  sp_23674 p_x_23660 s0_23658 set_flag_23659 x_1012 x_24237 k_print_sp_24201 when 
      (not x_24237) -> (k_print_sp_24201 s0_23658 p_x_23660).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not s0_23658) -> (fail_25293 true k_print_x_u_24156).
  u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_u_24156 when 
      (not (not s0_23658)) -> (k_print_x_u_24156 ()).
  x_23661 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143 ->
      (u_23666 p_x_23660 s0_23658 set_flag_23659 x_1012
       (f_x_25281 p_x_23660 s0_23658 set_flag_23659 x_1012 k_print_x_24143)).
Types:
  main_25280 : X
  f_rumble_25285 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> int -> X)
  fail_25293 : (bool -> (unit -> X) -> X)
  print_1010 : (x_2:bool -> x_3:bool -> int -> int[x_2; (not x_3)] -> (bool -> unit -> X) -> X)
  rumble_1011 : (int -> bool -> bool -> int -> int -> (bool -> int -> X) -> X)
  sp_23674 : (int -> bool -> bool -> int -> bool -> (bool -> int -> X) -> X)
  u_23666 : (int -> x_3:bool -> bool -> int[x_3] -> (unit -> X) -> X)

(16-1) Abstracting ... DONE!

(16-2) Checking HORS ... DONE!

Safe!

Fair terminating!

cycles: 5
CEGAR-cycles: 16
total: 2.364 sec
  abst: 0.664 sec
  mc: 0.692 sec
  refine: 0.592 sec
