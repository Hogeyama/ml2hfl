MoCHi: Model Checker for Higher-Order Programs
  Build: _af132b7 (after 2015-07-27 18:08:37 +0900)
  FPAT version: af132b7
  TRecS version: 1.33
  HorSat version: 0.99
  OCaml version: 4.02.1
  Command: ./mochi.opt -ignore-conf -color -fair-termination -bool-init-empty -fpat '-wp-max 2 -neg-pred' 
           test_fair_termination/hofmann-1.ml -expand-set-flag -rank-widen -horsat

parsed:
 let event_1008 s_1009 = () in
 let rec f_1010 x_2005 = let u_2015 = event_1008 "A" in
                         let u_2013 = event_1008 "B" in
                         f_1010 () in
 let main_1011 x_2017 = f_1010 () in
 ()

FAIRNESS: {(B, Never)}

###set_main:
 let rec f_2020 (s_2050:(bool)) (set_flag_2051:bool) (x_2005:unit) =
   let s__u_2055 = ((#0 s_2050), ()) in
   let s_2056 = fst s__u_2055 in
   let u_2021 = snd s__u_2055 in
   let s_2061 = fst ((true), ()) in
   let u_2022 = snd ((true), ()) in
   f_2020 s_2061 set_flag_2051 ()
 in
 let main_1011 (s_2068:(bool)) (set_flag_2069:bool) (x_2017:unit) =
   if set_flag_2069
   then
     let x_2070 = let u_2074 = if not (#0 s_2068) then assert false in
                  rand_int () = 0 in
     let sp_2080 = if x_2070 then ((false), ()) else (s_2068, ()) in
     let s_2071 = fst sp_2080 in
     f_2020 s_2071 true ()
   else
     let sp_2085 = if true then ((false), ()) else (s_2068, ()) in
     let s_2086 = fst sp_2085 in
     f_2020 s_2086 true ()
 in
 let s__r_main_2090 = main_1011 (false) false () in
 let s_2091 = fst s__r_main_2090 in
 let r_main_2042 = snd s__r_main_2090 in
 r_main_2042

###beta_reduce_trivial:
 let rec f_2020 (s_2050:(bool)) (set_flag_2051:bool) (x_2005:unit) =
   let s_2061 = fst ((true), ()) in
   f_2020 s_2061 set_flag_2051 ()
 in
 let main_1011 (s_2068:(bool)) (set_flag_2069:bool) (x_2017:unit) =
   if set_flag_2069
   then
     let x_2070 = let u_2074 = if not (#0 s_2068) then assert false in
                  rand_int () = 0 in
     let sp_2080 = if x_2070 then ((false), ()) else (s_2068, ()) in
     let s_2071 = fst sp_2080 in
     f_2020 s_2071 true ()
   else
     let sp_2085 = if true then ((false), ()) else (s_2068, ()) in
     let s_2086 = fst sp_2085 in
     f_2020 s_2086 true ()
 in
 let s__r_main_2090 = main_1011 (false) false () in
 let r_main_2042 = snd s__r_main_2090 in
 r_main_2042

###inline:
 let rec f_2020 (s_2050:(bool)) (set_flag_2051:bool) (x_2005:unit) =
   let s_2061 = fst ((true), ()) in
   f_2020 s_2061 set_flag_2051 ()
 in
 let main_1011 (s_2068:(bool)) (set_flag_2069:bool) (x_2017:unit) =
   if set_flag_2069
   then
     let x_2070 = let u_2074 = if not (#0 s_2068) then assert false in
                  rand_int () = 0 in
     let sp_2080 = if x_2070 then ((false), ()) else (s_2068, ()) in
     f_2020 (fst sp_2080) true ()
   else
     let sp_2085 = if true then ((false), ()) else (s_2068, ()) in
     f_2020 (fst sp_2085) true ()
 in
 let s__r_main_2090 = main_1011 (false) false () in
 snd s__r_main_2090

###CPS:
 (let rec f_2020 s_2050 set_flag_2051 x_2005 k_f_2253 =
    (fun s_2697 -> (f_2020 s_2697 set_flag_2051) () k_f_2253) (true)
  in
  let main_1011 s_2068 set_flag_2069 x_2017 k_main_2290 =
    if set_flag_2069
    then
      let x_2070 k_main_x_2294 =
        let u_2074 k_main_x_u_2307 = if not (#0 s_2068) then <|fail|> () k_main_x_u_2307 else k_main_x_u_2307 () in
        u_2074 (fun u_2324 -> rand_int_cps () (fun x_2312 -> k_main_x_2294 (x_2312 = 0)))
      in
      x_2070
        (fun x_2360 ->
           let sp_2080 k_main_sp_2344 =
             if x_2360 then k_main_sp_2344 ((false), ()) else k_main_sp_2344 (s_2068, ())
           in
           sp_2080 (fun sp_2359 -> (f_2020 (fst sp_2359) true) () k_main_2290))
    else
      (fun sp_2698 -> (f_2020 (fst sp_2698) true) () k_main_2290) ((false), ())
  in
  let s__r_main_2090 k_s__r_main_2441 = ((main_1011 (false)) false) () k_s__r_main_2441 in
  s__r_main_2090 (fun s__r_main_2447 -> {end}) # [ACPS])

###remove_pair:
 (let rec f_2020 s0_2050 set_flag_2051 x_2005 k_f_2253 = f_2020 true set_flag_2051 () k_f_2253 in
  let main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 =
    if set_flag_2069
    then
      let x_2070 k_main_x_2294 =
        let u_2074 k_main_x_u_2307 = if not s0_2068 then <|fail|> () k_main_x_u_2307 else k_main_x_u_2307 () in
        u_2074 (fun u_2324 -> rand_int_cps () (fun x_2312 -> k_main_x_2294 (x_2312 = 0)))
      in
      x_2070
        (fun x_2360 ->
           let sp_2080 k_main_sp_2344 =
             if x_2360 then k_main_sp_2344 false () else k_main_sp_2344 s0_2068 ()
           in
           sp_2080 (fun sp00_2359 sp1_2359 -> f_2020 sp00_2359 true () k_main_2290))
    else
      f_2020 false true () k_main_2290
  in
  main_1011 false false () (fun s__r_main00_2447 s__r_main1_2447 -> {end}) # 
  [ACPS])

###replace_bottom_def:
 (let rec f_2020 s0_2050 set_flag_2051 x_2005 k_f_2253 = _|_ in
  let main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 =
    if set_flag_2069
    then
      let x_2070 k_main_x_2294 =
        let u_2074 k_main_x_u_2307 = if not s0_2068 then <|fail|> () k_main_x_u_2307 else k_main_x_u_2307 () in
        u_2074 (fun u_2324 -> rand_int_cps () (fun x_2312 -> k_main_x_2294 (x_2312 = 0)))
      in
      x_2070
        (fun x_2360 ->
           let sp_2080 k_main_sp_2344 =
             if x_2360 then k_main_sp_2344 false () else k_main_sp_2344 s0_2068 ()
           in
           sp_2080 (fun sp00_2359 sp1_2359 -> f_2020 sp00_2359 true () k_main_2290))
    else
      f_2020 false true () k_main_2290
  in
  main_1011 false false () (fun s__r_main00_2447 s__r_main1_2447 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 0)::
Main: main_2795
  main_2795 -> (main_1011 false false () f_2800).
  f_2020 s0_2050 set_flag_2051 x_2005 k_f_2253 -> _|_.
  f_2800 s__r_main00_2447 s__r_main1_2447 -> end.
  f_main_2798 s0_2068 set_flag_2069 x_2017 k_main_2290 x_2360 ->
      (sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 (f_main_2799 s0_2068 set_flag_2069 x_2017 x_2360 k_main_2290)).
  f_main_2799 s0_2068 set_flag_2069 x_2017 x_2360 k_main_2290 sp00_2359 sp1_2359 ->
      (f_2020 sp00_2359 true () k_main_2290).
  f_x_2796 s0_2068 set_flag_2069 x_2017 k_main_x_2294 u_2324 ->
      (rand_int (f_x_2797 s0_2068 set_flag_2069 u_2324 x_2017 k_main_x_2294)).
  f_x_2797 s0_2068 set_flag_2069 u_2324 x_2017 k_main_x_2294 x_2312 -> (k_main_x_2294 (x_2312 = 0)).
  fail_2801 b k -> {fail} => (k ()).
  main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 when set_flag_2069 ->
      (x_2070 s0_2068 set_flag_2069 x_2017 (f_main_2798 s0_2068 set_flag_2069 x_2017 k_main_2290)).
  main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 when (not set_flag_2069) -> (f_2020 false true () k_main_2290).
  sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 k_main_sp_2344 when x_2360 -> (k_main_sp_2344 false ()).
  sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 k_main_sp_2344 when (not x_2360) -> (k_main_sp_2344 s0_2068 ()).
  u_2074 s0_2068 set_flag_2069 x_2017 k_main_x_u_2307 when (not s0_2068) -> (fail_2801 true k_main_x_u_2307).
  u_2074 s0_2068 set_flag_2069 x_2017 k_main_x_u_2307 when (not (not s0_2068)) -> (k_main_x_u_2307 ()).
  x_2070 s0_2068 set_flag_2069 x_2017 k_main_x_2294 ->
      (u_2074 s0_2068 set_flag_2069 x_2017 (f_x_2796 s0_2068 set_flag_2069 x_2017 k_main_x_2294)).
Types:
  main_2795 : X
  fail_2801 : (bool -> (unit -> X) -> X)
  main_1011 : (bool -> bool -> unit -> (bool -> unit -> X) -> X)
  sp_2080 : (bool -> bool -> unit -> bool -> (bool -> unit -> X) -> X)
  u_2074 : (bool -> bool -> unit -> (unit -> X) -> X)

(0-1) Abstracting ... DONE!

(0-2) Checking HORS ... DONE!

Error trace::
  main_2795 ... --> 
  main_1011 [1/2] ... --> 
  x_2070 ... --> 
  u_2074 [1/2] ... --> 
  fail_2801 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0

(0-3) Checking counterexample ... DONE!

(0-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0

Program with abstraction types (CEGAR-cycle 1)::
Main: main_2795
  main_2795 -> (main_1011 false false () f_2800).
  f_2020 s0_2050 set_flag_2051 x_2005 k_f_2253 -> _|_.
  f_2800 s__r_main00_2447 s__r_main1_2447 -> end.
  f_main_2798 s0_2068 set_flag_2069 x_2017 k_main_2290 x_2360 ->
      (sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 (f_main_2799 s0_2068 set_flag_2069 x_2017 x_2360 k_main_2290)).
  f_main_2799 s0_2068 set_flag_2069 x_2017 x_2360 k_main_2290 sp00_2359 sp1_2359 ->
      (f_2020 sp00_2359 true () k_main_2290).
  f_x_2796 s0_2068 set_flag_2069 x_2017 k_main_x_2294 u_2324 ->
      (rand_int (f_x_2797 s0_2068 set_flag_2069 u_2324 x_2017 k_main_x_2294)).
  f_x_2797 s0_2068 set_flag_2069 u_2324 x_2017 k_main_x_2294 x_2312 -> (k_main_x_2294 (x_2312 = 0)).
  fail_2801 b k -> {fail} => (k ()).
  main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 when set_flag_2069 ->
      (x_2070 s0_2068 set_flag_2069 x_2017 (f_main_2798 s0_2068 set_flag_2069 x_2017 k_main_2290)).
  main_1011 s0_2068 set_flag_2069 x_2017 k_main_2290 when (not set_flag_2069) -> (f_2020 false true () k_main_2290).
  sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 k_main_sp_2344 when x_2360 -> (k_main_sp_2344 false ()).
  sp_2080 s0_2068 set_flag_2069 x_2017 x_2360 k_main_sp_2344 when (not x_2360) -> (k_main_sp_2344 s0_2068 ()).
  u_2074 s0_2068 set_flag_2069 x_2017 k_main_x_u_2307 when (not s0_2068) -> (fail_2801 true k_main_x_u_2307).
  u_2074 s0_2068 set_flag_2069 x_2017 k_main_x_u_2307 when (not (not s0_2068)) -> (k_main_x_u_2307 ()).
  x_2070 s0_2068 set_flag_2069 x_2017 k_main_x_2294 ->
      (u_2074 s0_2068 set_flag_2069 x_2017 (f_x_2796 s0_2068 set_flag_2069 x_2017 k_main_x_2294)).
Types:
  main_2795 : X
  fail_2801 : (bool -> (unit -> X) -> X)
  main_1011 : (bool -> x_3:bool -> unit[(not x_3)] -> (bool -> unit -> X) -> X)
  sp_2080 : (bool -> bool -> unit -> bool -> (bool -> unit -> X) -> X)
  u_2074 : (bool -> bool -> unit -> (unit -> X) -> X)

(1-1) Abstracting ... DONE!

(1-2) Checking HORS ... DONE!

Safe!

###set_main:
 let rec f_2020 (s_3173:(bool)) (set_flag_3174:bool) (x_2005:unit) =
   if set_flag_3174
   then
     let x_3175 = let u_3179 = if not (#0 s_3173) then assert false in
                  rand_int () = 0 in
     let sp_3185 = if x_3175 then ((false), ()) else (s_3173, ()) in
     let s_3176 = fst sp_3185 in
     let s__u_3189 = ((#0 s_3176), ()) in
     let s_3190 = fst s__u_3189 in
     let u_2021 = snd s__u_3189 in
     let s_3195 = fst ((true), ()) in
     let u_2022 = snd ((true), ()) in
     f_2020 s_3195 true ()
   else
     let sp_3200 = if true then ((false), ()) else (s_3173, ()) in
     let s_3201 = fst sp_3200 in
     let s__u_3203 = ((#0 s_3201), ()) in
     let s_3204 = fst s__u_3203 in
     let u_3205 = snd s__u_3203 in
     let s_3207 = fst ((true), ()) in
     let u_3208 = snd ((true), ()) in
     f_2020 s_3207 true ()
 in
 let main_1011 (s_3213:(bool)) (set_flag_3214:bool) (x_2017:unit) = f_2020 s_3213 set_flag_3214 () in
 let s__r_main_3219 = main_1011 (false) false () in
 let s_3220 = fst s__r_main_3219 in
 let r_main_2042 = snd s__r_main_3219 in
 r_main_2042

###beta_reduce_trivial:
 let rec f_2020 (s_3173:(bool)) (set_flag_3174:bool) (x_2005:unit) =
   if set_flag_3174
   then
     let x_3175 = let u_3179 = if not (#0 s_3173) then assert false in
                  rand_int () = 0 in
     let s_3195 = fst ((true), ()) in
     f_2020 s_3195 true ()
   else
     let s_3207 = fst ((true), ()) in
     f_2020 s_3207 true ()
 in
 let main_1011 (s_3213:(bool)) (set_flag_3214:bool) (x_2017:unit) = f_2020 s_3213 set_flag_3214 () in
 let s__r_main_3219 = main_1011 (false) false () in
 let r_main_2042 = snd s__r_main_3219 in
 r_main_2042

###inline:
 let rec f_2020 (s_3173:(bool)) (set_flag_3174:bool) (x_2005:unit) =
   if set_flag_3174
   then
     let x_3175 = let u_3179 = if not (#0 s_3173) then assert false in
                  rand_int () = 0 in
     let s_3195 = fst ((true), ()) in
     f_2020 s_3195 true ()
   else
     let s_3207 = fst ((true), ()) in
     f_2020 s_3207 true ()
 in
 let main_1011 (s_3213:(bool)) (set_flag_3214:bool) (x_2017:unit) = f_2020 s_3213 set_flag_3214 () in
 let s__r_main_3219 = main_1011 (false) false () in
 snd s__r_main_3219

###CPS:
 (let rec f_2020 s_3173 set_flag_3174 x_2005 k_f_3382 =
    if set_flag_3174
    then
      let x_3175 k_f_x_3386 =
        let u_3179 k_f_x_u_3399 = if not (#0 s_3173) then <|fail|> () k_f_x_u_3399 else k_f_x_u_3399 () in
        u_3179 (fun u_3416 -> rand_int_cps () (fun x_3404 -> k_f_x_3386 (x_3404 = 0)))
      in
      x_3175 (fun x_3445 -> (fun s_3760 -> (f_2020 s_3760 true) () k_f_3382) (true))
    else
      (fun s_3759 -> (f_2020 s_3759 true) () k_f_3382) (true)
  in
  let main_1011 s_3213 set_flag_3214 x_2017 k_main_3486 = (f_2020 s_3213 set_flag_3214) () k_main_3486 in
  let s__r_main_3219 k_s__r_main_3540 = ((main_1011 (false)) false) () k_s__r_main_3540 in
  s__r_main_3219 (fun s__r_main_3546 -> {end}) # [ACPS])

###remove_pair:
 (let rec f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 =
    if set_flag_3174
    then
      let x_3175 k_f_x_3386 =
        let u_3179 k_f_x_u_3399 = if not s0_3173 then <|fail|> () k_f_x_u_3399 else k_f_x_u_3399 () in
        u_3179 (fun u_3416 -> rand_int_cps () (fun x_3404 -> k_f_x_3386 (x_3404 = 0)))
      in
      x_3175 (fun x_3445 -> f_2020 true true () k_f_3382)
    else
      f_2020 true true () k_f_3382
  in
  f_2020 false false () (fun s__r_main00_3546 s__r_main1_3546 -> {end}) # 
  [ACPS])

Program with abstraction types (CEGAR-cycle 2)::
Main: main_3845
  main_3845 -> (f_2020 false false () f_3849).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when set_flag_3174 ->
      (x_3175 s0_3173 set_flag_3174 x_2005 (f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382)).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when (not set_flag_3174) -> (f_2020 true true () k_f_3382).
  f_3849 s__r_main00_3546 s__r_main1_3546 -> end.
  f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382 x_3445 -> (f_2020 true true () k_f_3382).
  f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386 u_3416 ->
      (rand_int (f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386)).
  f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386 x_3404 -> (k_f_x_3386 (x_3404 = 0)).
  fail_3850 b k -> {fail} => (k ()).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not s0_3173) -> (fail_3850 true k_f_x_u_3399).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not (not s0_3173)) -> (k_f_x_u_3399 ()).
  x_3175 s0_3173 set_flag_3174 x_2005 k_f_x_3386 ->
      (u_3179 s0_3173 set_flag_3174 x_2005 (f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386)).
Types:
  main_3845 : X
  f_2020 : (bool -> bool -> unit -> (bool -> unit -> X) -> X)
  fail_3850 : (bool -> (unit -> X) -> X)
  u_3179 : (bool -> bool -> unit -> (unit -> X) -> X)

(2-1) Abstracting ... DONE!

(2-2) Checking HORS ... DONE!

Error trace::
  main_3845 ... --> 
  f_2020 [1/2] ... --> 
  x_3175 ... --> 
  u_3179 [1/2] ... --> 
  fail_3850 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 0; 0; 0; 0

(2-3) Checking counterexample ... DONE!

(2-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 0

Program with abstraction types (CEGAR-cycle 3)::
Main: main_3845
  main_3845 -> (f_2020 false false () f_3849).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when set_flag_3174 ->
      (x_3175 s0_3173 set_flag_3174 x_2005 (f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382)).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when (not set_flag_3174) -> (f_2020 true true () k_f_3382).
  f_3849 s__r_main00_3546 s__r_main1_3546 -> end.
  f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382 x_3445 -> (f_2020 true true () k_f_3382).
  f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386 u_3416 ->
      (rand_int (f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386)).
  f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386 x_3404 -> (k_f_x_3386 (x_3404 = 0)).
  fail_3850 b k -> {fail} => (k ()).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not s0_3173) -> (fail_3850 true k_f_x_u_3399).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not (not s0_3173)) -> (k_f_x_u_3399 ()).
  x_3175 s0_3173 set_flag_3174 x_2005 k_f_x_3386 ->
      (u_3179 s0_3173 set_flag_3174 x_2005 (f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386)).
Types:
  main_3845 : X
  f_2020 : (bool -> x_3:bool -> unit[(not x_3)] -> (bool -> unit -> X) -> X)
  fail_3850 : (bool -> (unit -> X) -> X)
  u_3179 : (bool -> bool -> unit -> (unit -> X) -> X)

(3-1) Abstracting ... DONE!

(3-2) Checking HORS ... DONE!

Error trace::
  main_3845 ... --> 
  f_2020 [2/2] ... --> 
  f_2020 [1/2] ... --> 
  x_3175 ... --> 
  u_3179 [1/2] ... --> 
  fail_3850 ... --> fail -->
  ERROR!

Spurious counterexample::
  0; 1; 0; 0; 0; 0

(3-3) Checking counterexample ... DONE!

(3-4) Discovering predicates (infeasible case) ... 
DONE!

Prefix of spurious counterexample::
0; 1; 0; 0; 0

Program with abstraction types (CEGAR-cycle 4)::
Main: main_3845
  main_3845 -> (f_2020 false false () f_3849).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when set_flag_3174 ->
      (x_3175 s0_3173 set_flag_3174 x_2005 (f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382)).
  f_2020 s0_3173 set_flag_3174 x_2005 k_f_3382 when (not set_flag_3174) -> (f_2020 true true () k_f_3382).
  f_3849 s__r_main00_3546 s__r_main1_3546 -> end.
  f_f_3848 s0_3173 set_flag_3174 x_2005 k_f_3382 x_3445 -> (f_2020 true true () k_f_3382).
  f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386 u_3416 ->
      (rand_int (f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386)).
  f_x_3847 s0_3173 set_flag_3174 u_3416 x_2005 k_f_x_3386 x_3404 -> (k_f_x_3386 (x_3404 = 0)).
  fail_3850 b k -> {fail} => (k ()).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not s0_3173) -> (fail_3850 true k_f_x_u_3399).
  u_3179 s0_3173 set_flag_3174 x_2005 k_f_x_u_3399 when (not (not s0_3173)) -> (k_f_x_u_3399 ()).
  x_3175 s0_3173 set_flag_3174 x_2005 k_f_x_3386 ->
      (u_3179 s0_3173 set_flag_3174 x_2005 (f_x_3846 s0_3173 set_flag_3174 x_2005 k_f_x_3386)).
Types:
  main_3845 : X
  f_2020 : (x_2:bool -> x_3:bool -> unit[x_2; (not x_3)] -> (bool -> unit -> X) -> X)
  fail_3850 : (bool -> (unit -> X) -> X)
  u_3179 : (x_2:bool -> bool -> unit[x_2] -> (unit -> X) -> X)

(4-1) Abstracting ... DONE!

(4-2) Checking HORS ... DONE!

Safe!

Fair terminating!

cycles: 2
CEGAR-cycles: 4
total: 0.164 sec
  abst: 0.024 sec
  mc: 0.032 sec
  refine: 0.008 sec
