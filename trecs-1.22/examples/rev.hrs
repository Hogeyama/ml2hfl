/*** An example of string analysis ***/
/*** Given an input string in a*b*, the function rev defined below returns b*a* **/
/*** let main x = rev x eplison
     let rec rev x y = match x with epsilon -> y | a::x' -> rev x' (a::y) | b::x' -> rev x' (b::y) 
 ***/

%BEGING
S -> Rev Empty.
Empty x -> x.
Rev x -> case (endI (RevE x)) (aI (Rev (Concat a x))) (bI (Rev (Concat b x))).
RevE x -> x end.
Concat x y z -> x(y(z)).
%ENDG

%BEGINA
q0 case -> q0 q0 q0.
q1 case -> q1 q1 q1.
q2 case -> q2 q2 q2.
q3 case -> q3 q3 q3.
qany case -> qany qany qany.
q0 aI -> q0.
q0 bI -> q1.
q1 bI -> q1.
q1 aI -> qany. /** the input does not match a*b* ***/
q0 endI -> q2.
q1 endI -> q2.
q2 b -> q2.
q2 a -> q3.
q3 a -> q3.
q2 end -> .
q3 end -> .
qany aI -> qany.
qany bI -> qany.
qany endI -> qany.
qany a -> qany.
qany b -> qany.
qany end -> .
%ENDA
