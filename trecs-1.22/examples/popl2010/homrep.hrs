/*
let h = ... (*** homomorphism {a -> bb, b -> a} **)
let f h s n = case n of O => s | s(n') => f h (h s) n'
let main s n = f h (copy s) n

Input: a*b*, even

a*b*:
q0 a -> q0.
q0 b -> q1.
q0 e -> .
q1 b -> q1.
q1 e -> .

even:
q0 s -> q1.
q0 z -> .
q1 s -> q0.
*/

%BEGING
Sp -> S 0 0.
A xa xb z -> xa z.
B xa xb z -> xb z.
Empty xa xb z -> z.
Concat s1 s2 xa xb z -> s1 xa xb (s2 xa xb z).
I2Str x xa xb z -> _case 2 x
  (br (Concat A (I2Str 0) xa xb z) (br (Concat B (I2Str 1) xa xb z) (Empty xa xb z)))
  (br (Concat B (I2Str 1) xa xb z) (Empty xa xb z)).
Str2O s -> s a b e.
Hom sa sb s xa xb z -> s (sa xa xb) (sb xa xb) z.
S n s -> F n (Hom (Concat B B) A) (I2Str s).
F n h s -> _case 2 n
  (br (Str2O s) (F 1 h (h s)))
  (F 0 h (h s)).
%ENDG

/*
Output: a*b*
*/
%BEGINA
q0 a -> q0.
q0 b -> q1.
q0 e -> .
q0 br -> q0 q0.
q1 b -> q1.
q1 e -> .
q1 br -> q1 q1.
%ENDA
