/*** Encoding of a flow analysis problem, 
 *** taken from Might and Shivers, "Exploiting reachability and cardinality in higher-order flow analysis"
 *** The original program is
 ***   (let* ((id (lambda (x) x)) (unused (id lam))) (id lam').
 *** The question is whether lam flows to the result of the program.
 ***/

%BEGING
S -> C1 Id.   /*** let id = \lambda x.x in ... ***/
C1 id -> id Lam (C2 id). /*** let unused = id Lam in ... **/
C2 id unused -> id LamPrime C3. /*** id Lam' ***/
C3 x -> x end.            /*** read the result ***/
Lam x -> flow x.         /*** keep track of the flow of LamPrime; 
                              The terminal symbol "flow" appears in the value tree if Lam flows to the result. ***/
LamPrime x -> x.    /*** ignore the flow of LamPrime ***/
Id x k -> k x.      /*** Id is the CPS conversion of \lambda x.x ***/
%ENDG

%BEGINA
q0 end -> .
%ENDA
