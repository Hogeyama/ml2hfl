Split x -> Split_2 x:? x:?.
Split_1 x -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_1 man (Copy_1 n:i) qPair | f => Make_1 woman (Copy_1 n:i) qPair.
MakePair_1 ps ms fs -> case ps of nil => pair ms:o fs:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_1 sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) fs:o | f => MakePair_1 sib:i ms:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o).
Make_1 tag name sdpair -> case sdpair of pair s d => tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs)).
Map_1 f l -> case l of nil => nil | cons x xs => cons (f:i -> o x:i) (Map_1 f:i -> o xs:i).
Rev_1 l z -> case l of nil => z:o | cons x xs => Rev_1 xs:i (cons (Copy_1 x:i) z:o).
Copy_1 x -> case x of person x1 x2 x3 => person (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | gender x1 => gender (Copy_1 x1:i) | m => m | f => f | name x1 => name (Copy_1 x1:i) | text => text | children x1 => children (Copy_1 x1:i) | pair x1 x2 => pair (Copy_1 x1:i) (Copy_1 x2:i) | man x1 x2 x3 => man (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | woman x1 x2 x3 => woman (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | sons x1 => sons (Copy_1 x1:i) | daughters x1 => daughters (Copy_1 x1:i) | cons x1 x2 => cons (Copy_1 x1:i) (Copy_1 x2:i) | nil => nil.
Split_2 x x_2 -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => br (Make_1 man (Copy_1 n:i) qPair) (br (Make_2 man T_man (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair) (Make_2 man T_man (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair)) | f => Make_2 woman T_woman (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair.
MakePair_2 ps ps_2 ms ms_2 fs fs_2 -> case ps of nil => T_pair ms:o ms_2:o fs:o fs_2:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_2 sib:i sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) (T_cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender m) (T_gender m T_m) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) ms:o ms_2:o) fs:o fs_2:o | f => MakePair_2 sib:i sib:i ms:o ms_2:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o) (T_cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender f) (T_gender f T_f) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) fs:o fs_2:o).
Make_2 tag tag_2 name name_2 sdpair sdpair_2 -> case sdpair of pair s d => tag_2:o -> o -> o -> o name:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs)).
Map_2 f f_2 l l_2 -> case l of nil => T_nil | cons x xs => T_cons (f:i -> o x:i) (f_2:i -> o x:i x:i) (Map_1 f:i -> o xs:i) (Map_2 f:i -> o f_2:i -> o xs:i xs:i).
Rev_2 l l_2 z z_2 -> case l of nil => z_2:o | cons x xs => Rev_2 xs:i xs:i (cons (Copy_1 x:i) z:o) (T_cons (Copy_1 x:i) (Copy_2 x:i x:i) z:o z_2:o).
Copy_2 x x_2 -> case x of person x1 x2 x3 => T_person (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | gender x1 => T_gender (Copy_1 x1:i) (Copy_2 x1:i x1:i) | m => T_m | f => T_f | name x1 => T_name (Copy_1 x1:i) (Copy_2 x1:i x1:i) | text => T_text | children x1 => T_children (Copy_1 x1:i) (Copy_2 x1:i x1:i) | pair x1 x2 => T_pair (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | man x1 x2 x3 => T_man (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | woman x1 x2 x3 => T_woman (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | sons x1 => T_sons (Copy_1 x1:i) (Copy_2 x1:i x1:i) | daughters x1 => T_daughters (Copy_1 x1:i) (Copy_2 x1:i x1:i) | cons x1 x2 => T_cons (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | nil => T_nil.
T_person x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_gender x1 x1_2 -> x1_2:o.T_m -> success__.T_f -> success__.
T_name x1 x1_2 -> x1_2:o.T_text -> success__.T_children x1 x1_2 -> x1_2:o.
T_pair x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.
T_man x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_woman x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_sons x1 x1_2 -> x1_2:o.T_daughters x1 x1_2 -> x1_2:o.
T_cons x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.T_nil -> success__.
Split x -> Split_2 x:? x:?.
Split_1 x -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_1 man (Copy_1 n:i) qPair | f => Make_1 woman (Copy_1 n:i) qPair.
MakePair_1 ps ms fs -> case ps of nil => pair ms:o fs:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_1 sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) fs:o | f => MakePair_1 sib:i ms:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o).
Make_1 tag name sdpair -> case sdpair of pair s d => tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs)).
Map_1 f l -> case l of nil => nil | cons x xs => cons (f:i -> o x:i) (Map_1 f:i -> o xs:i).
Rev_1 l z -> case l of nil => z:o | cons x xs => Rev_1 xs:i (cons (Copy_1 x:i) z:o).
Copy_1 x -> case x of person x1 x2 x3 => person (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | gender x1 => gender (Copy_1 x1:i) | m => m | f => f | name x1 => name (Copy_1 x1:i) | text => text | children x1 => children (Copy_1 x1:i) | pair x1 x2 => pair (Copy_1 x1:i) (Copy_1 x2:i) | man x1 x2 x3 => man (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | woman x1 x2 x3 => woman (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | sons x1 => sons (Copy_1 x1:i) | daughters x1 => daughters (Copy_1 x1:i) | cons x1 x2 => cons (Copy_1 x1:i) (Copy_1 x2:i) | nil => nil.
Split_2 x x_2 -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_2 man T_man (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair | f => br (Make_1 woman (Copy_1 n:i) qPair) (br (Make_2 woman T_woman (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair) (Make_2 woman T_woman (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair)).
MakePair_2 ps ps_2 ms ms_2 fs fs_2 -> case ps of nil => T_pair ms:o ms_2:o fs:o fs_2:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_2 sib:i sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) (T_cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender m) (T_gender m T_m) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) ms:o ms_2:o) fs:o fs_2:o | f => MakePair_2 sib:i sib:i ms:o ms_2:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o) (T_cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender f) (T_gender f T_f) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) fs:o fs_2:o).
Make_2 tag tag_2 name name_2 sdpair sdpair_2 -> case sdpair of pair s d => tag_2:o -> o -> o -> o name:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs)).
Map_2 f f_2 l l_2 -> case l of nil => T_nil | cons x xs => T_cons (f:i -> o x:i) (f_2:i -> o x:i x:i) (Map_1 f:i -> o xs:i) (Map_2 f:i -> o f_2:i -> o xs:i xs:i).
Rev_2 l l_2 z z_2 -> case l of nil => z_2:o | cons x xs => Rev_2 xs:i xs:i (cons (Copy_1 x:i) z:o) (T_cons (Copy_1 x:i) (Copy_2 x:i x:i) z:o z_2:o).
Copy_2 x x_2 -> case x of person x1 x2 x3 => T_person (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | gender x1 => T_gender (Copy_1 x1:i) (Copy_2 x1:i x1:i) | m => T_m | f => T_f | name x1 => T_name (Copy_1 x1:i) (Copy_2 x1:i x1:i) | text => T_text | children x1 => T_children (Copy_1 x1:i) (Copy_2 x1:i x1:i) | pair x1 x2 => T_pair (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | man x1 x2 x3 => T_man (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | woman x1 x2 x3 => T_woman (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | sons x1 => T_sons (Copy_1 x1:i) (Copy_2 x1:i x1:i) | daughters x1 => T_daughters (Copy_1 x1:i) (Copy_2 x1:i x1:i) | cons x1 x2 => T_cons (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | nil => T_nil.
T_person x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_gender x1 x1_2 -> x1_2:o.T_m -> success__.T_f -> success__.
T_name x1 x1_2 -> x1_2:o.T_text -> success__.T_children x1 x1_2 -> x1_2:o.
T_pair x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.
T_man x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_woman x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_sons x1 x1_2 -> x1_2:o.T_daughters x1 x1_2 -> x1_2:o.
T_cons x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.T_nil -> success__.
Split x -> Split_2 x:? x:?.
Split_1 x -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_1 man (Copy_1 n:i) qPair | f => Make_1 woman (Copy_1 n:i) qPair.
MakePair_1 ps ms fs -> case ps of nil => pair ms:o fs:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_1 sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) fs:o | f => MakePair_1 sib:i ms:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o).
Make_1 tag name sdpair -> case sdpair of pair s d => tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs)).
Map_1 f l -> case l of nil => nil | cons x xs => cons (f:i -> o x:i) (Map_1 f:i -> o xs:i).
Rev_1 l z -> case l of nil => z:o | cons x xs => Rev_1 xs:i (cons (Copy_1 x:i) z:o).
Copy_1 x -> case x of person x1 x2 x3 => person (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | gender x1 => gender (Copy_1 x1:i) | m => m | f => f | name x1 => name (Copy_1 x1:i) | text => text | children x1 => children (Copy_1 x1:i) | pair x1 x2 => pair (Copy_1 x1:i) (Copy_1 x2:i) | man x1 x2 x3 => man (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | woman x1 x2 x3 => woman (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | sons x1 => sons (Copy_1 x1:i) | daughters x1 => daughters (Copy_1 x1:i) | cons x1 x2 => cons (Copy_1 x1:i) (Copy_1 x2:i) | nil => nil.
Split_2 x x_2 -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_2 man T_man (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair | f => Make_2 woman T_woman (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair.
MakePair_2 ps ps_2 ms ms_2 fs fs_2 -> case ps of nil => T_pair ms:o ms_2:o fs:o fs_2:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_2 sib:i sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) (T_cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender m) (T_gender m T_m) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) ms:o ms_2:o) fs:o fs_2:o | f => MakePair_2 sib:i sib:i ms:o ms_2:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o) (T_cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender f) (T_gender f T_f) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) fs:o fs_2:o).
Make_2 tag tag_2 name name_2 sdpair sdpair_2 -> case sdpair of pair s d => br (tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs))) (br (tag_2:o -> o -> o -> o name:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs))) (tag_2:o -> o -> o -> o name:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs)))).
Map_2 f f_2 l l_2 -> case l of nil => T_nil | cons x xs => T_cons (f:i -> o x:i) (f_2:i -> o x:i x:i) (Map_1 f:i -> o xs:i) (Map_2 f:i -> o f_2:i -> o xs:i xs:i).
Rev_2 l l_2 z z_2 -> case l of nil => z_2:o | cons x xs => Rev_2 xs:i xs:i (cons (Copy_1 x:i) z:o) (T_cons (Copy_1 x:i) (Copy_2 x:i x:i) z:o z_2:o).
Copy_2 x x_2 -> case x of person x1 x2 x3 => T_person (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | gender x1 => T_gender (Copy_1 x1:i) (Copy_2 x1:i x1:i) | m => T_m | f => T_f | name x1 => T_name (Copy_1 x1:i) (Copy_2 x1:i x1:i) | text => T_text | children x1 => T_children (Copy_1 x1:i) (Copy_2 x1:i x1:i) | pair x1 x2 => T_pair (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | man x1 x2 x3 => T_man (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | woman x1 x2 x3 => T_woman (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | sons x1 => T_sons (Copy_1 x1:i) (Copy_2 x1:i x1:i) | daughters x1 => T_daughters (Copy_1 x1:i) (Copy_2 x1:i x1:i) | cons x1 x2 => T_cons (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | nil => T_nil.
T_person x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_gender x1 x1_2 -> x1_2:o.T_m -> success__.T_f -> success__.
T_name x1 x1_2 -> x1_2:o.T_text -> success__.T_children x1 x1_2 -> x1_2:o.
T_pair x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.
T_man x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_woman x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_sons x1 x1_2 -> x1_2:o.T_daughters x1 x1_2 -> x1_2:o.
T_cons x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.T_nil -> success__.
Split x -> Split_2 x:? x:?.
Split_1 x -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_1 man (Copy_1 n:i) qPair | f => Make_1 woman (Copy_1 n:i) qPair.
MakePair_1 ps ms fs -> case ps of nil => pair ms:o fs:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_1 sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) fs:o | f => MakePair_1 sib:i ms:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o).
Make_1 tag name sdpair -> case sdpair of pair s d => tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs)).
Map_1 f l -> case l of nil => nil | cons x xs => cons (f:i -> o x:i) (Map_1 f:i -> o xs:i).
Rev_1 l z -> case l of nil => z:o | cons x xs => Rev_1 xs:i (cons (Copy_1 x:i) z:o).
Copy_1 x -> case x of person x1 x2 x3 => person (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | gender x1 => gender (Copy_1 x1:i) | m => m | f => f | name x1 => name (Copy_1 x1:i) | text => text | children x1 => children (Copy_1 x1:i) | pair x1 x2 => pair (Copy_1 x1:i) (Copy_1 x2:i) | man x1 x2 x3 => man (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | woman x1 x2 x3 => woman (Copy_1 x1:i) (Copy_1 x2:i) (Copy_1 x3:i) | sons x1 => sons (Copy_1 x1:i) | daughters x1 => daughters (Copy_1 x1:i) | cons x1 x2 => cons (Copy_1 x1:i) (Copy_1 x2:i) | nil => nil.
Split_2 x x_2 -> case x of person g n c => case c of children cs => case g of gender gend => case gend of m => Make_2 man T_man (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair | f => Make_2 woman T_woman (Copy_1 n:i) (Copy_2 n:i n:i) qPair qPair.
MakePair_2 ps ps_2 ms ms_2 fs fs_2 -> case ps of nil => T_pair ms:o ms_2:o fs:o fs_2:o | cons p sib => case p of person g n c => case g of gender gend => case gend of m => MakePair_2 sib:i sib:i (cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) ms:o) (T_cons (person (gender m) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender m) (T_gender m T_m) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) ms:o ms_2:o) fs:o fs_2:o | f => MakePair_2 sib:i sib:i ms:o ms_2:o (cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) fs:o) (T_cons (person (gender f) (Copy_1 n:i) (Copy_1 c:i)) (T_person (gender f) (T_gender f T_f) (Copy_1 n:i) (Copy_2 n:i n:i) (Copy_1 c:i) (Copy_2 c:i c:i)) fs:o fs_2:o).
Make_2 tag tag_2 name name_2 sdpair sdpair_2 -> case sdpair of pair s d => br (tag:o -> o -> o -> o name:o (sons (Map_1 Split_1 qMPs)) (daughters (Map_1 Split_1 qFPs))) (br (tag_2:o -> o -> o -> o name:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs))) (tag_2:o -> o -> o -> o na--------------------
File: split.hmtt
Order of original HMTT: 2
Size of original HMTT: 137 (6 rules)
BEGIN split_main.hors...
Size of transformed HMTT: 123 (6 rules)
Size of RSFD: 967 (5 rules)
Number of states of input automaton: 23
Number of states of output automaton: 9
END split_main.hors...
BEGIN split_coerce1.hors...
Size of transformed HMTT: 454 (27 rules)
Size of RSFD: 1974 (24 rules)
Number of states of input automaton: 16
Number of states of output automaton: 16
END split_coerce1.hors...
BEGIN split_coerce2.hors...
Size of transformed HMTT: 454 (27 rules)
Size of RSFD: 1974 (24 rules)
Number of states of input automaton: 16
Number of states of output automaton: 16
END split_coerce2.hors...
BEGIN split_coerce3.hors...
Size of transformed HMTT: 478 (27 rules)
Size of RSFD: 1709 (24 rules)
Number of states of input automaton: 16
Number of states of output automaton: 11
END split_coerce3.hors...
BEGIN split_coerce4.hors...
Size of transformed HMTT: 478 (27 rules)
Size of RSFD: 1709 (24 rules)
Number of states of input automaton: 16
Number of states of output automaton: 11
END split_coerce4.hors...
Total size of transformed HMTT: 1987 (114 rules)
Total size of RSFD: 8333
Total number of states of input automaton: 87
Total number of states of output automaton: 63
Elapsed Time: 0.328sec
me:o name_2:o (sons (Map_1 Split_1 qMPs)) (T_sons (Map_1 Split_1 qMPs) (Map_2 Split_1 Split_2 qMPs qMPs)) (daughters (Map_1 Split_1 qFPs)) (T_daughters (Map_1 Split_1 qFPs) (Map_2 Split_1 Split_2 qFPs qFPs)))).
Map_2 f f_2 l l_2 -> case l of nil => T_nil | cons x xs => T_cons (f:i -> o x:i) (f_2:i -> o x:i x:i) (Map_1 f:i -> o xs:i) (Map_2 f:i -> o f_2:i -> o xs:i xs:i).
Rev_2 l l_2 z z_2 -> case l of nil => z_2:o | cons x xs => Rev_2 xs:i xs:i (cons (Copy_1 x:i) z:o) (T_cons (Copy_1 x:i) (Copy_2 x:i x:i) z:o z_2:o).
Copy_2 x x_2 -> case x of person x1 x2 x3 => T_person (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | gender x1 => T_gender (Copy_1 x1:i) (Copy_2 x1:i x1:i) | m => T_m | f => T_f | name x1 => T_name (Copy_1 x1:i) (Copy_2 x1:i x1:i) | text => T_text | children x1 => T_children (Copy_1 x1:i) (Copy_2 x1:i x1:i) | pair x1 x2 => T_pair (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | man x1 x2 x3 => T_man (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | woman x1 x2 x3 => T_woman (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) (Copy_1 x3:i) (Copy_2 x3:i x3:i) | sons x1 => T_sons (Copy_1 x1:i) (Copy_2 x1:i x1:i) | daughters x1 => T_daughters (Copy_1 x1:i) (Copy_2 x1:i x1:i) | cons x1 x2 => T_cons (Copy_1 x1:i) (Copy_2 x1:i x1:i) (Copy_1 x2:i) (Copy_2 x2:i x2:i) | nil => T_nil.
T_person x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_gender x1 x1_2 -> x1_2:o.T_m -> success__.T_f -> success__.
T_name x1 x1_2 -> x1_2:o.T_text -> success__.T_children x1 x1_2 -> x1_2:o.
T_pair x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.
T_man x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_woman x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2:o (br x2_2:o x3_2:o).
T_sons x1 x1_2 -> x1_2:o.T_daughters x1 x1_2 -> x1_2:o.
T_cons x1 x1_2 x2 x2_2 -> br x1_2:o x2_2:o.