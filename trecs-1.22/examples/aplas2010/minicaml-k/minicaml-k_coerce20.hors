%BEGING
RSFDStart -> G 0.
G x -> G_2 x x.
G_2 x x_2 -> _case 5 x (CASE235 x) T_var (br fail fail) (br fail fail) CASE236.
T_ifeq x1 x1_2 x2 x2_2 x3 x3_2 x4 x4_2 -> br (br x1_2 x2_2) (br x3_2 x4_2).
KIf_1 op e2 e3 e4 x -> Insert_let_1 (G_1 e2) (KIf2_1 op e3 e4 x).
KIf_2 op op_2 e2 e2_2 e3 e3_2 e4 e4_2 x x_2 -> Insert_let_2 (G_1 e2) (G_2 e2 e2) (KIf2_1 op e3 e4 x) (KIf2_2 op op_2 e3 e3 e4 e4 x x_2).
T_ifle x1 x1_2 x2 x2_2 x3 x3_2 x4 x4_2 -> br (br x1_2 x2_2) (br x3_2 x4_2).
T_if x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2 (br x2_2 x3_2).
T_eq x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_bool -> success__.
KArray_1 e2 x -> Insert_let_1 (G_1 e2) (KArray2_1 x).
KArray_2 e2 e2_2 x x_2 -> Insert_let_2 (G_1 e2) (G_2 e2 e2) (KArray2_1 x) (KArray2_2 x x_2).
T_unit -> success__.
T_int -> success__.
T_float -> success__.
T_neg x1 x1_2 -> x1_2.
T_add x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_sub x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_fneg x1 x1_2 -> x1_2.
T_fadd x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_fsub x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_fmul x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_fdiv x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_let x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2 (br x2_2 x3_2).
T_var -> success__.
T_letrec x1 x1_2 x2 x2_2 x3 x3_2 x4 x4_2 -> br (br x1_2 x2_2) (br x3_2 x4_2).
Copy_1 x -> _case 5 x CASE237 var (br nil (cons (Copy_1 1) (Copy_1 2))) (br nil (cons (Copy_1 0) (Copy_1 3))) CASE238.
Copy_2 x x_2 -> _case 5 x CASE239 T_var (br T_nil (T_cons (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2))) (br T_nil (T_cons (Copy_1 0) (Copy_2 0 0) (Copy_1 3) (Copy_2 3 3))) CASE240.
KApp_1 e2s f -> Bind_1 f nil e2s.
KApp_2 e2s e2s_2 f f_2 -> Bind_2 f f_2 nil T_nil e2s e2s.
BindT_2 xs xs_2 es es_2 -> _case 5 es (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (T_tuple xs xs_2) (Insert_let_2 (G_1 1) (G_2 1 1) (KBindT_1 xs 2) (KBindT_2 xs xs_2 2 2))) (br (T_tuple xs xs_2) (Insert_let_2 (G_1 0) (G_2 0 0) (KBindT_1 xs 3) (KBindT_2 xs xs_2 3 3))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
T_nil -> success__.
KLetTuple_1 xts e2 y -> lettuple (Copy_1 xts) y (G_1 e2).
KLetTuple_2 xts xts_2 e2 e2_2 y y_2 -> T_lettuple (Copy_1 xts) (Copy_2 xts xts) y y_2 (G_1 e2) (G_2 e2 e2).
KBinOp_1 op e x -> Insert_let_1 (G_1 e) (op x).
KBinOp_2 op op_2 e e_2 x x_2 -> Insert_let_2 (G_1 e) (G_2 e e) (op x) (op_2 x x_2).
T_get x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
Insert_let_2 exp exp_2 k k_2 -> br (Insert_let2_2 4 4 k k_2) exp_2.
G_1 x -> _case 5 x CASE241 var (br fail fail) (br fail fail) CASE242.
KPut_1 e2 e3 x -> Insert_let_1 (G_1 e2) (KPut2_1 e3 x).
KPut_2 e2 e2_2 e3 e3_2 x x_2 -> Insert_let_2 (G_1 e2) (G_2 e2 e2) (KPut2_1 e3 x) (KPut2_2 e3 e3 x x_2).
KIf2_1 op e3 e4 x y -> op x y (G_1 e3) (G_1 e4).
KIf2_2 op op_2 e3 e3_2 e4 e4_2 x x_2 y y_2 -> op_2 x x_2 y y_2 (G_1 e3) (G_2 e3 e3) (G_1 e4) (G_2 e4 e4).
KArray2_1 x y -> app var (cons x (cons y nil)).
KArray2_2 x x_2 y y_2 -> T_app var T_var (cons x (cons y nil)) (T_cons x x_2 (cons y nil) (T_cons y y_2 nil T_nil)).
T_not x1 x1_2 -> x1_2.
T_le x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_array x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_cons x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_app x1 x1_2 x2 x2_2 -> br x1_2 x2_2.
T_put x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2 (br x2_2 x3_2).
Bind_1 f xs e2s -> _case 5 e2s (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (app f xs) (Insert_let_1 (G_1 1) (KBind_1 f xs 2))) (br (app f xs) (Insert_let_1 (G_1 0) (KBind_1 f xs 3))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
Bind_2 f f_2 xs xs_2 e2s e2s_2 -> _case 5 e2s (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (T_app f f_2 xs xs_2) (Insert_let_2 (G_1 1) (G_2 1 1) (KBind_1 f xs 2) (KBind_2 f f_2 xs xs_2 2 2))) (br (T_app f f_2 xs xs_2) (Insert_let_2 (G_1 0) (G_2 0 0) (KBind_1 f xs 3) (KBind_2 f f_2 xs xs_2 3 3))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
T_tuple x1 x1_2 -> x1_2.
KBindT_1 xs es x -> BindT_1 (Append_1 2 x) es.
KBindT_2 xs xs_2 es es_2 x x_2 -> br (BindT_2 (Append_1 2 x) (Append_2 2 2 x x_2) es es) xs_2.
T_lettuple x1 x1_2 x2 x2_2 x3 x3_2 -> br x1_2 (br x2_2 x3_2).
Insert_let2_2 exp exp_2 k k_2 -> _case 5 exp (CASE243 exp k k_2) (k_2 var T_var) (br fail fail) (br fail fail) (CASE244 exp k k_2).
BindT_1 xs es -> _case 5 es (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (tuple xs) (Insert_let_1 (G_1 1) (KBindT_1 xs 2))) (br (tuple xs) (Insert_let_1 (G_1 0) (KBindT_1 xs 3))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
Insert_let_1 exp k -> Insert_let2_1 4 k.
KPut2_1 e3 x y -> Insert_let_1 (G_1 e3) (put x y).
KPut2_2 e3 e3_2 x x_2 y y_2 -> Insert_let_2 (G_1 e3) (G_2 e3 e3) (put x y) (T_put x x_2 y y_2).
KBind_1 f xs e2s x -> Bind_1 f (Append_1 2 x) e2s.
KBind_2 f f_2 xs xs_2 e2s e2s_2 x x_2 -> br (Bind_2 f f_2 (Append_1 2 x) (Append_2 2 2 x x_2) e2s e2s) xs_2.
Append_1 xs x -> _case 5 xs (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (cons x nil) (cons (Copy_1 1) (Append_1 2 x))) (br (cons x nil) (cons (Copy_1 0) (Append_1 3 x))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
Append_2 xs xs_2 x x_2 -> _case 5 xs (br (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail)))) (br (br (br fail (br fail fail)) (br fail (br fail fail))) (br (br fail (br fail fail)) (br (br fail fail) (br fail fail))))) fail (br (T_cons x x_2 nil T_nil) (T_cons (Copy_1 1) (Copy_2 1 1) (Append_1 2 x) (Append_2 2 2 x x_2))) (br (T_cons x x_2 nil T_nil) (T_cons (Copy_1 0) (Copy_2 0 0) (Append_1 3 x) (Append_2 3 3 x x_2))) (br (br (br (br fail fail) (br fail (br fail fail))) (br (br fail fail) (br fail (br fail fail)))) (br (br (br fail fail) (br fail (br fail fail))) (br (br fail (br fail fail)) (br fail (br fail fail))))).
Insert_let2_1 exp k -> _case 5 exp (CASE245 exp k) (k var) (br fail fail) (br fail fail) (CASE246 exp k).
CASE235 x -> br (br (br (br T_unit (br T_int T_int)) (br T_float (br (br (G_2 0 0) (T_if (Copy_1 0) (Copy_2 0 0) bool T_bool bool T_bool)) (Insert_let_2 (G_1 0) (G_2 0 0) neg T_neg)))) (br (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 add 0) (KBinOp_2 add T_add 0 0)) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 sub 0) (KBinOp_2 sub T_sub 0 0)) (Insert_let_2 (G_1 0) (G_2 0 0) fneg T_fneg))) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 fadd 0) (KBinOp_2 fadd T_fadd 0 0)) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 fsub 0) (KBinOp_2 fsub T_fsub 0 0)) (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 fmul 0) (KBinOp_2 fmul T_fmul 0 0)))))) (br (br (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 fdiv 0) (KBinOp_2 fdiv T_fdiv 0 0)) (br (br (G_2 0 0) (T_if (Copy_1 x) (Copy_2 x x) bool T_bool bool T_bool)) (br (G_2 0 0) (T_if (Copy_1 x) (Copy_2 x x) bool T_bool bool T_bool)))) (br (br (br (br (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))))) (br (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))))))) (br (br (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KIf_1 ifeq 0 0 0) (KIf_2 ifeq T_ifeq 0 0 0 0 0 0)) (Insert_let_2 (G_1 0) (G_2 0 0) (KIf_1 ifle 0 0 0) (KIf_2 ifle T_ifle 0 0 0 0 0 0)))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (if (eq (Copy_1 0) bool) (Copy_1 0) (Copy_1 0)) (br (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (G_2 0 0)))))) (br (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))))) (br (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))) (br (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (G_2 0 0) (T_if (eq (Copy_1 0) bool) (T_eq (Copy_1 0) (Copy_2 0 0) bool T_bool) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))))))) (br (T_let (Copy_1 1) (Copy_2 1 1) (G_1 0) (G_2 0 0) (G_1 0) (G_2 0 0)) T_var))) (br (br (T_letrec (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2) (G_1 0) (G_2 0 0) (G_1 0) (G_2 0 0)) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KApp_1 3) (KApp_2 3 3)) (BindT_2 nil T_nil 3 3))) (br (br (Insert_let_2 (G_1 0) (G_2 0 0) (KLetTuple_1 2 0) (KLetTuple_2 2 2 0 0)) (Insert_let_2 (G_1 0) (G_2 0 0) (KArray_1 0) (KArray_2 0 0))) (br (Insert_let_2 (G_1 0) (G_2 0 0) (KBinOp_1 get 0) (KBinOp_2 get T_get 0 0)) (Insert_let_2 (G_1 0) (G_2 0 0) (KPut_1 0 0) (KPut_2 0 0 0 0)))))).
CASE236 -> br (br (br (br T_unit T_int) (br T_float (br (Insert_let_2 (G_1 1) (G_2 1 1) neg T_neg) (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 add 1) (KBinOp_2 add T_add 1 1))))) (br (br (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 sub 1) (KBinOp_2 sub T_sub 1 1)) (Insert_let_2 (G_1 1) (G_2 1 1) fneg T_fneg)) (br (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 fadd 1) (KBinOp_2 fadd T_fadd 1 1)) (br (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 fsub 1) (KBinOp_2 fsub T_fsub 1 1)) (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 fmul 1) (KBinOp_2 fmul T_fmul 1 1)))))) (br (br (br (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 fdiv 1) (KBinOp_2 fdiv T_fdiv 1 1)) fail) (br fail (br (T_let (Copy_1 1) (Copy_2 1 1) (G_1 4) (G_2 4 4) (G_1 4) (G_2 4 4)) T_var))) (br (br (T_letrec (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2) (G_1 4) (G_2 4 4) (G_1 4) (G_2 4 4)) (br (Insert_let_2 (G_1 1) (G_2 1 1) (KApp_1 2) (KApp_2 2 2)) (BindT_2 nil T_nil 2 2))) (br (Insert_let_2 (G_1 1) (G_2 1 1) (KLetTuple_1 2 4) (KLetTuple_2 2 2 4 4)) (br (Insert_let_2 (G_1 1) (G_2 1 1) (KBinOp_1 get 1) (KBinOp_2 get T_get 1 1)) (Insert_let_2 (G_1 1) (G_2 1 1) (KPut_1 1 1) (KPut_2 1 1 1 1)))))).
CASE237 -> br (br (br (br unit (br bool int)) (br float (br (not (Copy_1 0)) (neg (Copy_1 0))))) (br (br (add (Copy_1 0) (Copy_1 0)) (br (sub (Copy_1 0) (Copy_1 0)) (fneg (Copy_1 0)))) (br (fadd (Copy_1 0) (Copy_1 0)) (br (fsub (Copy_1 0) (Copy_1 0)) (fmul (Copy_1 0) (Copy_1 0)))))) (br (br (br (fdiv (Copy_1 0) (Copy_1 0)) (br (eq (Copy_1 0) (Copy_1 0)) (le (Copy_1 0) (Copy_1 0)))) (br (if (Copy_1 0) (Copy_1 0) (Copy_1 0)) (br (let (Copy_1 1) (Copy_1 0) (Copy_1 0)) var))) (br (br (letrec (Copy_1 1) (Copy_1 2) (Copy_1 0) (Copy_1 0)) (br (app (Copy_1 0) (Copy_1 3)) (tuple (Copy_1 3)))) (br (br (lettuple (Copy_1 2) (Copy_1 0) (Copy_1 0)) (array (Copy_1 0) (Copy_1 0))) (br (get (Copy_1 0) (Copy_1 0)) (put (Copy_1 0) (Copy_1 0) (Copy_1 0)))))).
CASE238 -> br (br (br (br unit int) (br float (br (neg (Copy_1 1)) (add (Copy_1 1) (Copy_1 1))))) (br (br (sub (Copy_1 1) (Copy_1 1)) (fneg (Copy_1 1))) (br (fadd (Copy_1 1) (Copy_1 1)) (br (fsub (Copy_1 1) (Copy_1 1)) (fmul (Copy_1 1) (Copy_1 1)))))) (br (br (br (fdiv (Copy_1 1) (Copy_1 1)) (ifeq (Copy_1 1) (Copy_1 1) (Copy_1 4) (Copy_1 4))) (br (ifle (Copy_1 1) (Copy_1 1) (Copy_1 4) (Copy_1 4)) (br (let (Copy_1 1) (Copy_1 4) (Copy_1 4)) var))) (br (br (letrec (Copy_1 1) (Copy_1 2) (Copy_1 4) (Copy_1 4)) (br (app (Copy_1 1) (Copy_1 2)) (tuple (Copy_1 2)))) (br (lettuple (Copy_1 2) (Copy_1 1) (Copy_1 4)) (br (get (Copy_1 1) (Copy_1 1)) (put (Copy_1 1) (Copy_1 1) (Copy_1 1)))))).
CASE239 -> br (br (br (br T_unit (br T_bool T_int)) (br T_float (br (T_not (Copy_1 0) (Copy_2 0 0)) (T_neg (Copy_1 0) (Copy_2 0 0))))) (br (br (T_add (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (br (T_sub (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (T_fneg (Copy_1 0) (Copy_2 0 0)))) (br (T_fadd (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (br (T_fsub (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (T_fmul (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))))) (br (br (br (T_fdiv (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (br (T_eq (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (T_le (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))) (br (T_if (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (br (T_let (Copy_1 1) (Copy_2 1 1) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) T_var))) (br (br (T_letrec (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (br (T_app (Copy_1 0) (Copy_2 0 0) (Copy_1 3) (Copy_2 3 3)) (T_tuple (Copy_1 3) (Copy_2 3 3)))) (br (br (T_lettuple (Copy_1 2) (Copy_2 2 2) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (T_array (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0))) (br (T_get (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)) (T_put (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0) (Copy_1 0) (Copy_2 0 0)))))).
CASE240 -> br (br (br (br T_unit T_int) (br T_float (br (T_neg (Copy_1 1) (Copy_2 1 1)) (T_add (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1))))) (br (br (T_sub (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)) (T_fneg (Copy_1 1) (Copy_2 1 1))) (br (T_fadd (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)) (br (T_fsub (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)) (T_fmul (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)))))) (br (br (br (T_fdiv (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)) (T_ifeq (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1) (Copy_1 4) (Copy_2 4 4) (Copy_1 4) (Copy_2 4 4))) (br (T_ifle (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1) (Copy_1 4) (Copy_2 4 4) (Copy_1 4) (Copy_2 4 4)) (br (T_let (Copy_1 1) (Copy_2 1 1) (Copy_1 4) (Copy_2 4 4) (Copy_1 4) (Copy_2 4 4)) T_var))) (br (br (T_letrec (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2) (Copy_1 4) (Copy_2 4 4) (Copy_1 4) (Copy_2 4 4)) (br (T_app (Copy_1 1) (Copy_2 1 1) (Copy_1 2) (Copy_2 2 2)) (T_tuple (Copy_1 2) (Copy_2 2 2)))) (br (T_lettuple (Copy_1 2) (Copy_2 2 2) (Copy_1 1) (Copy_2 1 1) (Copy_1 4) (Copy_2 4 4)) (br (T_get (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)) (T_put (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1) (Copy_1 1) (Copy_2 1 1)))))).
CASE241 -> br (br (br (br unit (br int int)) (br float (br (G_1 0) (Insert_let_1 (G_1 0) neg)))) (br (br (Insert_let_1 (G_1 0) (KBinOp_1 add 0)) (br (Insert_let_1 (G_1 0) (KBinOp_1 sub 0)) (Insert_let_1 (G_1 0) fneg))) (br (Insert_let_1 (G_1 0) (KBinOp_1 fadd 0)) (br (Insert_let_1 (G_1 0) (KBinOp_1 fsub 0)) (Insert_let_1 (G_1 0) (KBinOp_1 fmul 0)))))) (br (br (br (Insert_let_1 (G_1 0) (KBinOp_1 fdiv 0)) (br (G_1 0) (G_1 0))) (br (br (br (br (br (G_1 0) (br (G_1 0) (G_1 0))) (br (G_1 0) (br (G_1 0) (G_1 0)))) (br (br (G_1 0) (br (G_1 0) (G_1 0))) (br (G_1 0) (br (G_1 0) (G_1 0))))) (br (br (br (G_1 0) (br (Insert_let_1 (G_1 0) (KIf_1 ifeq 0 0 0)) (Insert_let_1 (G_1 0) (KIf_1 ifle 0 0 0)))) (br (G_1 0) (br (G_1 0) (G_1 0)))) (br (br (G_1 0) (br (G_1 0) (G_1 0))) (br (br (G_1 0) (G_1 0)) (br (G_1 0) (G_1 0)))))) (br (let (Copy_1 1) (G_1 0) (G_1 0)) var))) (br (br (letrec (Copy_1 1) (Copy_1 2) (G_1 0) (G_1 0)) (br (Insert_let_1 (G_1 0) (KApp_1 3)) (BindT_1 nil 3))) (br (br (Insert_let_1 (G_1 0) (KLetTuple_1 2 0)) (Insert_let_1 (G_1 0) (KArray_1 0))) (br (Insert_let_1 (G_1 0) (KBinOp_1 get 0)) (Insert_let_1 (G_1 0) (KPut_1 0 0)))))).
CASE242 -> br (br (br (br unit int) (br float (br (Insert_let_1 (G_1 1) neg) (Insert_let_1 (G_1 1) (KBinOp_1 add 1))))) (br (br (Insert_let_1 (G_1 1) (KBinOp_1 sub 1)) (Insert_let_1 (G_1 1) fneg)) (br (Insert_let_1 (G_1 1) (KBinOp_1 fadd 1)) (br (Insert_let_1 (G_1 1) (KBinOp_1 fsub 1)) (Insert_let_1 (G_1 1) (KBinOp_1 fmul 1)))))) (br (br (br (Insert_let_1 (G_1 1) (KBinOp_1 fdiv 1)) fail) (br fail (br (let (Copy_1 1) (G_1 4) (G_1 4)) var))) (br (br (letrec (Copy_1 1) (Copy_1 2) (G_1 4) (G_1 4)) (br (Insert_let_1 (G_1 1) (KApp_1 2)) (BindT_1 nil 2))) (br (Insert_let_1 (G_1 1) (KLetTuple_1 2 4)) (br (Insert_let_1 (G_1 1) (KBinOp_1 get 1)) (Insert_let_1 (G_1 1) (KPut_1 1 1)))))).
CASE243 exp k k_2 -> br (br (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br fail (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br fail (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var))))) (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))))) (br (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br fail fail)) (br fail (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (k_2 var T_var)))) (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))) (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) fail) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))))).
CASE244 exp k k_2 -> br (br (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var))))) (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))))) (br (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (k_2 var T_var)))) (br (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (br (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)) (T_let var T_var (Copy_1 exp) (Copy_2 exp exp) (k var) (k_2 var T_var)))))).
CASE245 exp k -> br (br (br (br (let var (Copy_1 exp) (k var)) (br fail (let var (Copy_1 exp) (k var)))) (br (let var (Copy_1 exp) (k var)) (br fail (let var (Copy_1 exp) (k var))))) (br (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))) (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))))) (br (br (br (let var (Copy_1 exp) (k var)) (br fail fail)) (br fail (br (let var (Copy_1 exp) (k var)) (k var)))) (br (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))) (br (br (let var (Copy_1 exp) (k var)) fail) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))))).
CASE246 exp k -> br (br (br (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var))) (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var))))) (br (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var))) (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))))) (br (br (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var))) (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (k var)))) (br (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))) (br (let var (Copy_1 exp) (k var)) (br (let var (Copy_1 exp) (k var)) (let var (Copy_1 exp) (k var)))))).
%ENDG

%BEGINA
qSyn unit -> .
qSyn bool -> .
qSyn int -> .
qSyn float -> .
qSyn not -> qSyn.
qSyn neg -> qSyn.
qSyn add -> qSyn qSyn.
qSyn sub -> qSyn qSyn.
qSyn fneg -> qSyn.
qSyn fadd -> qSyn qSyn.
qSyn fsub -> qSyn qSyn.
qSyn fmul -> qSyn qSyn.
qSyn fdiv -> qSyn qSyn.
qSyn eq -> qSyn qSyn.
qSyn le -> qSyn qSyn.
qSyn if -> qSyn qSyn qSyn.
qSyn let -> qVar qSyn qSyn.
qSyn var -> .
qSyn letrec -> qVar qVars qSyn qSyn.
qSyn app -> qSyn qSyns.
qSyn tuple -> qSyns.
qSyn lettuple -> qVars qSyn qSyn.
qSyn array -> qSyn qSyn.
qSyn get -> qSyn qSyn.
qSyn put -> qSyn qSyn qSyn.
qSyn br -> qSyn qSyn.
qSyn success__ -> .
qVar var -> .
qVar br -> qVar qVar.
qVar success__ -> .
qSyns nil -> .
qSyns cons -> qSyn qSyns.
qSyns br -> qSyns qSyns.
qSyns success__ -> .
qVars nil -> .
qVars cons -> qVar qVars.
qVars br -> qVars qVars.
qVars success__ -> .

%ENDA