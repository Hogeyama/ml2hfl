%BEGING
TT a b f xs -> a f xs.
FF a b f xs -> b f xs.
Pair fst snd b f xs -> b fst snd f xs.
Fst pair f xs -> pair TT f xs.
Snd pair f xs -> pair FF f xs.

Map f xs -> case xs of
	  nil => nil
	| cons y ys => cons (f y) (Map f ys)
.
Filt p xs -> case xs of
	  nil => nil
	| cons y ys => Filt2 (coerce qFT (p y)) p y ys
.
Filt2 b p x xs -> case b of
	  tt => cons (copy x) (Filt p xs)
	| ff => Filt p xs
.

M b f xs -> Pair Map Filt b f xs.

F x -> case x of a => c | b => d.
P x -> case x of c => tt | d => ff.

/*MapFilt xs -> Snd M P (coerce qCD (Fst M F xs)).*/
MapFilt xs -> Filt P xs.

%ENDG

%BEGINA
qFT tt -> .
qFT ff -> .

qAB nil -> .
qAB cons -> qab qAB.
qab a -> .
qab b -> .

qCD nil -> .
qCD cons -> qcd qCD.
qcd c -> .
qcd d -> .

qC nil -> .
qC cons -> qc qC.
qc c -> .
%ENDA

%BEGINT
MapFilt : qCD -> qC.
%ENDT
