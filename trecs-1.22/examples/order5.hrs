/*** An order-5 recursion scheme 
 *** let genconsume gen use finish = let x = gen() then loop use finish x
 *** let loop use finish x = if * then (finish x)  else (use x; loop use finish x) in
 *** let genr () = open_in * in
 *** let genw () = open_out * in
 ***   genconsume genr read close; genconsume genw write close
 ***/

%BEGING
S -> GenConsume Newr Read Close (GenConsume Neww Write Close end). /** (GenConsume Neww F2 end). **/
GenConsume gen use finish k -> gen (Loop use finish k).
Loop use finish k x -> br (finish x k) (use x (Loop use finish k x)).
C use k x -> use x k.
I x y -> x y.
K x y -> y.
Newr k -> br (newr (k I)) (k K).
Neww k -> br (neww (k I)) (k K).
Close x k -> x close k.
Read x k -> x read k.
Write y k -> y write k.
%ENDG

%BEGINA
q0 br -> q0 q0.
qr br -> qr qr.
qw br -> qw qw.
qrw br -> qrw qrw.
q0 newr -> qr.
qr read -> qr.
qr close -> qc.
qc br -> qc qc.
q0 neww -> qw.
qw write -> qw.
qw close -> qc.
qw newr -> qrw.
qr neww -> qrw.
qc newr -> qrw.
qc neww -> qrw.
qrw newr -> qrw.
qrw neww -> qrw.
qrw read -> qrw.
qrw write -> qrw.
qrw close -> qrw.
qc end ->.
q0 end ->.
qrw end ->.
%ENDA
