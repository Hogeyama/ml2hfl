/*** Taken from the extended version of POPL09 paper ***/
/*** 
 *** let l1 = newlock() in
 *** let rel1 x = unlock(l1) in
 *** let acq1 x = lock(l1) in
 *** let rec f g =
 ***   if * then g()
 ***   else
 ***    let l2 = newlock() in
 ***    let rel2 x = unlock(l2) in
 ***    let acq2 x = lock(l2) in
 ***      (acq2(); f rel2; g())
 *** in
 ***   (acq1(); f rel1)
 ***/

%BEGING  
S -> NewL C1.
C1 x -> C2 (Unlock x) (Lock x).
Unlock x k -> x unlock k.
Lock x k -> x lock k.
C2 h1 h2 -> h2(F h1 end).
F g k -> br (g k) (NewL (C3 g k)).
C3 g k x -> C4 g (Unlock x) (Lock x) k.
C4 g h1 h2 k -> h2(F h1 (g k)).
NewL k -> br (newl (k I)) (k K).
I x y -> x y.
K x y -> y.
/** rule size: 79 **/
%ENDG

%BEGINA
q0 br -> q0 q0.
q1 br -> q1 q1.
q2 br -> q2 q2.
qany br -> qany qany.
q0 newl -> q1.
q1 newl -> qany.
q2 newl -> qany.
qany lock -> qany.
qany newl -> qany.
qany unlock -> qany.
qany end -> .
q1 lock -> q2.
q2 unlock -> q1.
q0 end -> .
q1 end -> .
%ENDA
